
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ef4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001024  08001024  00011024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001044  08001044  0001104c  2**0
                  CONTENTS
  4 .ARM          00000000  08001044  08001044  0001104c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001044  0800104c  0001104c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001044  08001044  00011044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001048  08001048  00011048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001104c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000000  0800104c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  0800104c  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001104c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006db5  00000000  00000000  00011075  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001088  00000000  00000000  00017e2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000012fa  00000000  00000000  00018eb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000002e8  00000000  00000000  0001a1b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000260  00000000  00000000  0001a498  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000039d0  00000000  00000000  0001a6f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00004216  00000000  00000000  0001e0c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000d944  00000000  00000000  000222de  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002fc22  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000099c  00000000  00000000  0002fca0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800100c 	.word	0x0800100c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800100c 	.word	0x0800100c

08000170 <EEPROM_Init>:
 * @retval				-	NONE
 * Note					-	NONE
 *						-
 */
void EEPROM_Init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b08a      	sub	sp, #40	; 0x28
 8000174:	af00      	add	r7, sp, #0
	//PB6 : I2C1_SCL
	//PB7 : I2C1_I2C1_SDA
	I2C_PinConfig_t I2C1CFG ;

	//I2C controller act as Master
	I2C1CFG.I2C_Call_Address_Detection = I2C_Call_Address_Detection_ENGC_Enable ;
 8000176:	2340      	movs	r3, #64	; 0x40
 8000178:	623b      	str	r3, [r7, #32]
	I2C1CFG.I2C_ACK_Control = I2C_ACK_Control_Enable ;
 800017a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800017e:	61fb      	str	r3, [r7, #28]
	I2C1CFG.I2C_ClockSpeed = I2C_SCLK_SM_100K ;
 8000180:	4b09      	ldr	r3, [pc, #36]	; (80001a8 <EEPROM_Init+0x38>)
 8000182:	607b      	str	r3, [r7, #4]
	I2C1CFG.I2C_Mode = I2C_Mode_I2C ;
 8000184:	2300      	movs	r3, #0
 8000186:	60fb      	str	r3, [r7, #12]
	I2C1CFG.P_Slave_Event_CallBack = NULL ;
 8000188:	2300      	movs	r3, #0
 800018a:	627b      	str	r3, [r7, #36]	; 0x24
	I2C1CFG.I2C_STRETCH_Mode = I2C_STRETCH_Mode_Enable ;
 800018c:	2300      	movs	r3, #0
 800018e:	60bb      	str	r3, [r7, #8]

	MCAL_I2C_GPIO_Set_Pins(I2C1) ;
 8000190:	4806      	ldr	r0, [pc, #24]	; (80001ac <EEPROM_Init+0x3c>)
 8000192:	f000 fbb3 	bl	80008fc <MCAL_I2C_GPIO_Set_Pins>
	MCAL_I2C_Init(I2C1, &I2C1CFG) ;
 8000196:	1d3b      	adds	r3, r7, #4
 8000198:	4619      	mov	r1, r3
 800019a:	4804      	ldr	r0, [pc, #16]	; (80001ac <EEPROM_Init+0x3c>)
 800019c:	f000 faa4 	bl	80006e8 <MCAL_I2C_Init>

}
 80001a0:	bf00      	nop
 80001a2:	3728      	adds	r7, #40	; 0x28
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	000186a0 	.word	0x000186a0
 80001ac:	40005400 	.word	0x40005400

080001b0 <EEPROM_Write_NBytes>:
 * @retval				-	NONE
 * Note					-	NONE
 *						-
 */
unsigned char EEPROM_Write_NBytes(unsigned int Memory_Address , unsigned char *Bytes , uint8_t Data_Lenght)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b0c8      	sub	sp, #288	; 0x120
 80001b4:	af02      	add	r7, sp, #8
 80001b6:	f107 030c 	add.w	r3, r7, #12
 80001ba:	6018      	str	r0, [r3, #0]
 80001bc:	f107 0308 	add.w	r3, r7, #8
 80001c0:	6019      	str	r1, [r3, #0]
 80001c2:	1dfb      	adds	r3, r7, #7
 80001c4:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0 ;
 80001c6:	2300      	movs	r3, #0
 80001c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	uint8_t buffer[256] ;
	buffer[0] = (uint8_t)(Memory_Address>>8) ; //Upper byte Memory Address
 80001cc:	f107 030c 	add.w	r3, r7, #12
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	0a1b      	lsrs	r3, r3, #8
 80001d4:	b2da      	uxtb	r2, r3
 80001d6:	f107 0314 	add.w	r3, r7, #20
 80001da:	701a      	strb	r2, [r3, #0]
	buffer[1] = (uint8_t)(Memory_Address) ;    //Lower byte Memory Address
 80001dc:	f107 030c 	add.w	r3, r7, #12
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	b2da      	uxtb	r2, r3
 80001e4:	f107 0314 	add.w	r3, r7, #20
 80001e8:	705a      	strb	r2, [r3, #1]

	for(i=2 ; i<(Data_Lenght+2) ; i++)
 80001ea:	2302      	movs	r3, #2
 80001ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 80001f0:	e011      	b.n	8000216 <EEPROM_Write_NBytes+0x66>
	{
		buffer[i] = Bytes[i-2] ;
 80001f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80001f6:	3b02      	subs	r3, #2
 80001f8:	f107 0208 	add.w	r2, r7, #8
 80001fc:	6812      	ldr	r2, [r2, #0]
 80001fe:	441a      	add	r2, r3
 8000200:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000204:	7811      	ldrb	r1, [r2, #0]
 8000206:	f107 0214 	add.w	r2, r7, #20
 800020a:	54d1      	strb	r1, [r2, r3]
	for(i=2 ; i<(Data_Lenght+2) ; i++)
 800020c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000210:	3301      	adds	r3, #1
 8000212:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8000216:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 800021a:	1dfb      	adds	r3, r7, #7
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	3302      	adds	r3, #2
 8000220:	429a      	cmp	r2, r3
 8000222:	dbe6      	blt.n	80001f2 <EEPROM_Write_NBytes+0x42>
	}

	MCAL_I2C_Master_Send_Data_TX( I2C1, EEPROM_SLAVE_ADDRESS , buffer , (Data_Lenght+2), With_Stop, Start) ;
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	3302      	adds	r3, #2
 800022a:	4619      	mov	r1, r3
 800022c:	f107 0214 	add.w	r2, r7, #20
 8000230:	2300      	movs	r3, #0
 8000232:	9301      	str	r3, [sp, #4]
 8000234:	2300      	movs	r3, #0
 8000236:	9300      	str	r3, [sp, #0]
 8000238:	460b      	mov	r3, r1
 800023a:	212a      	movs	r1, #42	; 0x2a
 800023c:	4804      	ldr	r0, [pc, #16]	; (8000250 <EEPROM_Write_NBytes+0xa0>)
 800023e:	f000 fc33 	bl	8000aa8 <MCAL_I2C_Master_Send_Data_TX>
	return 0 ;
 8000242:	2300      	movs	r3, #0

}
 8000244:	4618      	mov	r0, r3
 8000246:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	40005400 	.word	0x40005400

08000254 <EEPROM_Read_Byte>:
 * @param[out] 			-	Data_Lenght
 * @retval				-	NONE
 * Note					-	NONE
 *						-
 */
uint8_t EEPROM_Read_Byte(unsigned int Memory_Address , uint8_t* DataOut , uint8_t Data_Lenght){
 8000254:	b580      	push	{r7, lr}
 8000256:	b088      	sub	sp, #32
 8000258:	af02      	add	r7, sp, #8
 800025a:	60f8      	str	r0, [r7, #12]
 800025c:	60b9      	str	r1, [r7, #8]
 800025e:	4613      	mov	r3, r2
 8000260:	71fb      	strb	r3, [r7, #7]
	uint8_t  buffer[2] ;
	buffer[0] = (uint8_t)(Memory_Address>>8) ; //upper byte memory address
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	0a1b      	lsrs	r3, r3, #8
 8000266:	b2db      	uxtb	r3, r3
 8000268:	753b      	strb	r3, [r7, #20]
	buffer[1] = (uint8_t)(Memory_Address) ;    //lower byte memory address
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	b2db      	uxtb	r3, r3
 800026e:	757b      	strb	r3, [r7, #21]

	MCAL_I2C_Master_Send_Data_TX(I2C1, EEPROM_SLAVE_ADDRESS , &buffer , 2, Without_Stop, Start ) ;  //write address only
 8000270:	f107 0214 	add.w	r2, r7, #20
 8000274:	2300      	movs	r3, #0
 8000276:	9301      	str	r3, [sp, #4]
 8000278:	2301      	movs	r3, #1
 800027a:	9300      	str	r3, [sp, #0]
 800027c:	2302      	movs	r3, #2
 800027e:	212a      	movs	r1, #42	; 0x2a
 8000280:	4809      	ldr	r0, [pc, #36]	; (80002a8 <EEPROM_Read_Byte+0x54>)
 8000282:	f000 fc11 	bl	8000aa8 <MCAL_I2C_Master_Send_Data_TX>
	MCAL_I2C_Master_Receive_Data_RX(I2C1, EEPROM_SLAVE_ADDRESS , DataOut , Data_Lenght, With_Stop, RepeatedStart) ;   //Read
 8000286:	79fa      	ldrb	r2, [r7, #7]
 8000288:	2301      	movs	r3, #1
 800028a:	9301      	str	r3, [sp, #4]
 800028c:	2300      	movs	r3, #0
 800028e:	9300      	str	r3, [sp, #0]
 8000290:	4613      	mov	r3, r2
 8000292:	68ba      	ldr	r2, [r7, #8]
 8000294:	212a      	movs	r1, #42	; 0x2a
 8000296:	4804      	ldr	r0, [pc, #16]	; (80002a8 <EEPROM_Read_Byte+0x54>)
 8000298:	f000 fb7a 	bl	8000990 <MCAL_I2C_Master_Receive_Data_RX>

	return 0;
 800029c:	2300      	movs	r3, #0

}
 800029e:	4618      	mov	r0, r3
 80002a0:	3718      	adds	r7, #24
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	40005400 	.word	0x40005400

080002ac <EXTI0_IRQHandler>:
 * ===============================================
				"ISR Function"
 * ===============================================
 */

void EXTI0_IRQHandler (void){
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
	//Disable Pending register
	EXTI->PR |= 1<<0 ;
 80002b0:	4b05      	ldr	r3, [pc, #20]	; (80002c8 <EXTI0_IRQHandler+0x1c>)
 80002b2:	695b      	ldr	r3, [r3, #20]
 80002b4:	4a04      	ldr	r2, [pc, #16]	; (80002c8 <EXTI0_IRQHandler+0x1c>)
 80002b6:	f043 0301 	orr.w	r3, r3, #1
 80002ba:	6153      	str	r3, [r2, #20]
	// CALLBACK IRQ
	GP_IRQ_CallBack[0] ();
 80002bc:	4b03      	ldr	r3, [pc, #12]	; (80002cc <EXTI0_IRQHandler+0x20>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4798      	blx	r3

	}
 80002c2:	bf00      	nop
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	40010400 	.word	0x40010400
 80002cc:	20000070 	.word	0x20000070

080002d0 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler (void){
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	//Disable Pending register
		EXTI->PR |= (1<<1) ;
 80002d4:	4b05      	ldr	r3, [pc, #20]	; (80002ec <EXTI1_IRQHandler+0x1c>)
 80002d6:	695b      	ldr	r3, [r3, #20]
 80002d8:	4a04      	ldr	r2, [pc, #16]	; (80002ec <EXTI1_IRQHandler+0x1c>)
 80002da:	f043 0302 	orr.w	r3, r3, #2
 80002de:	6153      	str	r3, [r2, #20]
		// CALLBACK IRQ
		GP_IRQ_CallBack[1]();
 80002e0:	4b03      	ldr	r3, [pc, #12]	; (80002f0 <EXTI1_IRQHandler+0x20>)
 80002e2:	685b      	ldr	r3, [r3, #4]
 80002e4:	4798      	blx	r3

	}
 80002e6:	bf00      	nop
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	40010400 	.word	0x40010400
 80002f0:	20000070 	.word	0x20000070

080002f4 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler (void){
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	//Disable Pending register
		EXTI->PR |= (1<<2) ;
 80002f8:	4b05      	ldr	r3, [pc, #20]	; (8000310 <EXTI2_IRQHandler+0x1c>)
 80002fa:	695b      	ldr	r3, [r3, #20]
 80002fc:	4a04      	ldr	r2, [pc, #16]	; (8000310 <EXTI2_IRQHandler+0x1c>)
 80002fe:	f043 0304 	orr.w	r3, r3, #4
 8000302:	6153      	str	r3, [r2, #20]
		// CALLBACK IRQ
		GP_IRQ_CallBack[2]();
 8000304:	4b03      	ldr	r3, [pc, #12]	; (8000314 <EXTI2_IRQHandler+0x20>)
 8000306:	689b      	ldr	r3, [r3, #8]
 8000308:	4798      	blx	r3

	}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	40010400 	.word	0x40010400
 8000314:	20000070 	.word	0x20000070

08000318 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler (void){
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	//Disable Pending register
		EXTI->PR |= (1<<3) ;
 800031c:	4b05      	ldr	r3, [pc, #20]	; (8000334 <EXTI3_IRQHandler+0x1c>)
 800031e:	695b      	ldr	r3, [r3, #20]
 8000320:	4a04      	ldr	r2, [pc, #16]	; (8000334 <EXTI3_IRQHandler+0x1c>)
 8000322:	f043 0308 	orr.w	r3, r3, #8
 8000326:	6153      	str	r3, [r2, #20]
		// CALLBACK IRQ
		GP_IRQ_CallBack[3]();
 8000328:	4b03      	ldr	r3, [pc, #12]	; (8000338 <EXTI3_IRQHandler+0x20>)
 800032a:	68db      	ldr	r3, [r3, #12]
 800032c:	4798      	blx	r3

	}
 800032e:	bf00      	nop
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	40010400 	.word	0x40010400
 8000338:	20000070 	.word	0x20000070

0800033c <EXTI4_IRQHandler>:
void EXTI4_IRQHandler (void){
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	//Disable Pending register
		EXTI->PR |= (1<<4) ;
 8000340:	4b05      	ldr	r3, [pc, #20]	; (8000358 <EXTI4_IRQHandler+0x1c>)
 8000342:	695b      	ldr	r3, [r3, #20]
 8000344:	4a04      	ldr	r2, [pc, #16]	; (8000358 <EXTI4_IRQHandler+0x1c>)
 8000346:	f043 0310 	orr.w	r3, r3, #16
 800034a:	6153      	str	r3, [r2, #20]
		// CALLBACK IRQ
		GP_IRQ_CallBack[4]();
 800034c:	4b03      	ldr	r3, [pc, #12]	; (800035c <EXTI4_IRQHandler+0x20>)
 800034e:	691b      	ldr	r3, [r3, #16]
 8000350:	4798      	blx	r3

	}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40010400 	.word	0x40010400
 800035c:	20000070 	.word	0x20000070

08000360 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler (void){
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5){ EXTI->PR |= (1<<5) ; GP_IRQ_CallBack[5](); }
 8000364:	4b26      	ldr	r3, [pc, #152]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 8000366:	695b      	ldr	r3, [r3, #20]
 8000368:	f003 0320 	and.w	r3, r3, #32
 800036c:	2b00      	cmp	r3, #0
 800036e:	d008      	beq.n	8000382 <EXTI9_5_IRQHandler+0x22>
 8000370:	4b23      	ldr	r3, [pc, #140]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 8000372:	695b      	ldr	r3, [r3, #20]
 8000374:	4a22      	ldr	r2, [pc, #136]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 8000376:	f043 0320 	orr.w	r3, r3, #32
 800037a:	6153      	str	r3, [r2, #20]
 800037c:	4b21      	ldr	r3, [pc, #132]	; (8000404 <EXTI9_5_IRQHandler+0xa4>)
 800037e:	695b      	ldr	r3, [r3, #20]
 8000380:	4798      	blx	r3
	if(EXTI->PR & 1<<6){ EXTI->PR |= (1<<6) ; GP_IRQ_CallBack[6](); }
 8000382:	4b1f      	ldr	r3, [pc, #124]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800038a:	2b00      	cmp	r3, #0
 800038c:	d008      	beq.n	80003a0 <EXTI9_5_IRQHandler+0x40>
 800038e:	4b1c      	ldr	r3, [pc, #112]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	4a1b      	ldr	r2, [pc, #108]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 8000394:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000398:	6153      	str	r3, [r2, #20]
 800039a:	4b1a      	ldr	r3, [pc, #104]	; (8000404 <EXTI9_5_IRQHandler+0xa4>)
 800039c:	699b      	ldr	r3, [r3, #24]
 800039e:	4798      	blx	r3
	if(EXTI->PR & 1<<7){ EXTI->PR |= (1<<7) ; GP_IRQ_CallBack[7](); }
 80003a0:	4b17      	ldr	r3, [pc, #92]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 80003a2:	695b      	ldr	r3, [r3, #20]
 80003a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d008      	beq.n	80003be <EXTI9_5_IRQHandler+0x5e>
 80003ac:	4b14      	ldr	r3, [pc, #80]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 80003ae:	695b      	ldr	r3, [r3, #20]
 80003b0:	4a13      	ldr	r2, [pc, #76]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 80003b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003b6:	6153      	str	r3, [r2, #20]
 80003b8:	4b12      	ldr	r3, [pc, #72]	; (8000404 <EXTI9_5_IRQHandler+0xa4>)
 80003ba:	69db      	ldr	r3, [r3, #28]
 80003bc:	4798      	blx	r3
	if(EXTI->PR & 1<<8){ EXTI->PR |= (1<<8) ; GP_IRQ_CallBack[8](); }
 80003be:	4b10      	ldr	r3, [pc, #64]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d008      	beq.n	80003dc <EXTI9_5_IRQHandler+0x7c>
 80003ca:	4b0d      	ldr	r3, [pc, #52]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 80003cc:	695b      	ldr	r3, [r3, #20]
 80003ce:	4a0c      	ldr	r2, [pc, #48]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 80003d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003d4:	6153      	str	r3, [r2, #20]
 80003d6:	4b0b      	ldr	r3, [pc, #44]	; (8000404 <EXTI9_5_IRQHandler+0xa4>)
 80003d8:	6a1b      	ldr	r3, [r3, #32]
 80003da:	4798      	blx	r3
	if(EXTI->PR & 1<<9){ EXTI->PR |= (1<<9) ; GP_IRQ_CallBack[9](); }
 80003dc:	4b08      	ldr	r3, [pc, #32]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 80003de:	695b      	ldr	r3, [r3, #20]
 80003e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d008      	beq.n	80003fa <EXTI9_5_IRQHandler+0x9a>
 80003e8:	4b05      	ldr	r3, [pc, #20]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 80003ea:	695b      	ldr	r3, [r3, #20]
 80003ec:	4a04      	ldr	r2, [pc, #16]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 80003ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003f2:	6153      	str	r3, [r2, #20]
 80003f4:	4b03      	ldr	r3, [pc, #12]	; (8000404 <EXTI9_5_IRQHandler+0xa4>)
 80003f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003f8:	4798      	blx	r3

	}
 80003fa:	bf00      	nop
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	40010400 	.word	0x40010400
 8000404:	20000070 	.word	0x20000070

08000408 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler (void){
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10){ EXTI->PR |= (1<<10) ; GP_IRQ_CallBack[10](); }
 800040c:	4b2d      	ldr	r3, [pc, #180]	; (80004c4 <EXTI15_10_IRQHandler+0xbc>)
 800040e:	695b      	ldr	r3, [r3, #20]
 8000410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000414:	2b00      	cmp	r3, #0
 8000416:	d008      	beq.n	800042a <EXTI15_10_IRQHandler+0x22>
 8000418:	4b2a      	ldr	r3, [pc, #168]	; (80004c4 <EXTI15_10_IRQHandler+0xbc>)
 800041a:	695b      	ldr	r3, [r3, #20]
 800041c:	4a29      	ldr	r2, [pc, #164]	; (80004c4 <EXTI15_10_IRQHandler+0xbc>)
 800041e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000422:	6153      	str	r3, [r2, #20]
 8000424:	4b28      	ldr	r3, [pc, #160]	; (80004c8 <EXTI15_10_IRQHandler+0xc0>)
 8000426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000428:	4798      	blx	r3
	if(EXTI->PR & 1<<11){ EXTI->PR |= (1<<11) ; GP_IRQ_CallBack[11](); }
 800042a:	4b26      	ldr	r3, [pc, #152]	; (80004c4 <EXTI15_10_IRQHandler+0xbc>)
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000432:	2b00      	cmp	r3, #0
 8000434:	d008      	beq.n	8000448 <EXTI15_10_IRQHandler+0x40>
 8000436:	4b23      	ldr	r3, [pc, #140]	; (80004c4 <EXTI15_10_IRQHandler+0xbc>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	4a22      	ldr	r2, [pc, #136]	; (80004c4 <EXTI15_10_IRQHandler+0xbc>)
 800043c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000440:	6153      	str	r3, [r2, #20]
 8000442:	4b21      	ldr	r3, [pc, #132]	; (80004c8 <EXTI15_10_IRQHandler+0xc0>)
 8000444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000446:	4798      	blx	r3
	if(EXTI->PR & 1<<12){ EXTI->PR |= (1<<12) ; GP_IRQ_CallBack[12](); }
 8000448:	4b1e      	ldr	r3, [pc, #120]	; (80004c4 <EXTI15_10_IRQHandler+0xbc>)
 800044a:	695b      	ldr	r3, [r3, #20]
 800044c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000450:	2b00      	cmp	r3, #0
 8000452:	d008      	beq.n	8000466 <EXTI15_10_IRQHandler+0x5e>
 8000454:	4b1b      	ldr	r3, [pc, #108]	; (80004c4 <EXTI15_10_IRQHandler+0xbc>)
 8000456:	695b      	ldr	r3, [r3, #20]
 8000458:	4a1a      	ldr	r2, [pc, #104]	; (80004c4 <EXTI15_10_IRQHandler+0xbc>)
 800045a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800045e:	6153      	str	r3, [r2, #20]
 8000460:	4b19      	ldr	r3, [pc, #100]	; (80004c8 <EXTI15_10_IRQHandler+0xc0>)
 8000462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000464:	4798      	blx	r3
	if(EXTI->PR & 1<<13){ EXTI->PR |= (1<<13) ; GP_IRQ_CallBack[13](); }
 8000466:	4b17      	ldr	r3, [pc, #92]	; (80004c4 <EXTI15_10_IRQHandler+0xbc>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800046e:	2b00      	cmp	r3, #0
 8000470:	d008      	beq.n	8000484 <EXTI15_10_IRQHandler+0x7c>
 8000472:	4b14      	ldr	r3, [pc, #80]	; (80004c4 <EXTI15_10_IRQHandler+0xbc>)
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	4a13      	ldr	r2, [pc, #76]	; (80004c4 <EXTI15_10_IRQHandler+0xbc>)
 8000478:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800047c:	6153      	str	r3, [r2, #20]
 800047e:	4b12      	ldr	r3, [pc, #72]	; (80004c8 <EXTI15_10_IRQHandler+0xc0>)
 8000480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000482:	4798      	blx	r3
	if(EXTI->PR & 1<<14){ EXTI->PR |= (1<<14) ; GP_IRQ_CallBack[14](); }
 8000484:	4b0f      	ldr	r3, [pc, #60]	; (80004c4 <EXTI15_10_IRQHandler+0xbc>)
 8000486:	695b      	ldr	r3, [r3, #20]
 8000488:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800048c:	2b00      	cmp	r3, #0
 800048e:	d008      	beq.n	80004a2 <EXTI15_10_IRQHandler+0x9a>
 8000490:	4b0c      	ldr	r3, [pc, #48]	; (80004c4 <EXTI15_10_IRQHandler+0xbc>)
 8000492:	695b      	ldr	r3, [r3, #20]
 8000494:	4a0b      	ldr	r2, [pc, #44]	; (80004c4 <EXTI15_10_IRQHandler+0xbc>)
 8000496:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800049a:	6153      	str	r3, [r2, #20]
 800049c:	4b0a      	ldr	r3, [pc, #40]	; (80004c8 <EXTI15_10_IRQHandler+0xc0>)
 800049e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004a0:	4798      	blx	r3
	if(EXTI->PR & 1<<15){ EXTI->PR |= (1<<15) ; GP_IRQ_CallBack[15](); }
 80004a2:	4b08      	ldr	r3, [pc, #32]	; (80004c4 <EXTI15_10_IRQHandler+0xbc>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d008      	beq.n	80004c0 <EXTI15_10_IRQHandler+0xb8>
 80004ae:	4b05      	ldr	r3, [pc, #20]	; (80004c4 <EXTI15_10_IRQHandler+0xbc>)
 80004b0:	695b      	ldr	r3, [r3, #20]
 80004b2:	4a04      	ldr	r2, [pc, #16]	; (80004c4 <EXTI15_10_IRQHandler+0xbc>)
 80004b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004b8:	6153      	str	r3, [r2, #20]
 80004ba:	4b03      	ldr	r3, [pc, #12]	; (80004c8 <EXTI15_10_IRQHandler+0xc0>)
 80004bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004be:	4798      	blx	r3

	}
 80004c0:	bf00      	nop
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	40010400 	.word	0x40010400
 80004c8:	20000070 	.word	0x20000070

080004cc <Get_CRLH_Position>:
/*
 * ===============================================
 * APIs Supported by "MCAL GPIO DRIVER"
 * ===============================================
 */
uint8_t Get_CRLH_Position (uint16_t PinNumber) {
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 80004d6:	88fb      	ldrh	r3, [r7, #6]
 80004d8:	2b80      	cmp	r3, #128	; 0x80
 80004da:	d042      	beq.n	8000562 <Get_CRLH_Position+0x96>
 80004dc:	2b80      	cmp	r3, #128	; 0x80
 80004de:	dc11      	bgt.n	8000504 <Get_CRLH_Position+0x38>
 80004e0:	2b08      	cmp	r3, #8
 80004e2:	d036      	beq.n	8000552 <Get_CRLH_Position+0x86>
 80004e4:	2b08      	cmp	r3, #8
 80004e6:	dc06      	bgt.n	80004f6 <Get_CRLH_Position+0x2a>
 80004e8:	2b02      	cmp	r3, #2
 80004ea:	d02e      	beq.n	800054a <Get_CRLH_Position+0x7e>
 80004ec:	2b04      	cmp	r3, #4
 80004ee:	d02e      	beq.n	800054e <Get_CRLH_Position+0x82>
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d028      	beq.n	8000546 <Get_CRLH_Position+0x7a>
 80004f4:	e047      	b.n	8000586 <Get_CRLH_Position+0xba>
 80004f6:	2b20      	cmp	r3, #32
 80004f8:	d02f      	beq.n	800055a <Get_CRLH_Position+0x8e>
 80004fa:	2b40      	cmp	r3, #64	; 0x40
 80004fc:	d02f      	beq.n	800055e <Get_CRLH_Position+0x92>
 80004fe:	2b10      	cmp	r3, #16
 8000500:	d029      	beq.n	8000556 <Get_CRLH_Position+0x8a>
 8000502:	e040      	b.n	8000586 <Get_CRLH_Position+0xba>
 8000504:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000508:	d033      	beq.n	8000572 <Get_CRLH_Position+0xa6>
 800050a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800050e:	dc09      	bgt.n	8000524 <Get_CRLH_Position+0x58>
 8000510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000514:	d029      	beq.n	800056a <Get_CRLH_Position+0x9e>
 8000516:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800051a:	d028      	beq.n	800056e <Get_CRLH_Position+0xa2>
 800051c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000520:	d021      	beq.n	8000566 <Get_CRLH_Position+0x9a>
 8000522:	e030      	b.n	8000586 <Get_CRLH_Position+0xba>
 8000524:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000528:	d027      	beq.n	800057a <Get_CRLH_Position+0xae>
 800052a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800052e:	dc03      	bgt.n	8000538 <Get_CRLH_Position+0x6c>
 8000530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000534:	d01f      	beq.n	8000576 <Get_CRLH_Position+0xaa>
 8000536:	e026      	b.n	8000586 <Get_CRLH_Position+0xba>
 8000538:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800053c:	d01f      	beq.n	800057e <Get_CRLH_Position+0xb2>
 800053e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000542:	d01e      	beq.n	8000582 <Get_CRLH_Position+0xb6>
 8000544:	e01f      	b.n	8000586 <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0 :
		return 0 ;
 8000546:	2300      	movs	r3, #0
 8000548:	e01e      	b.n	8000588 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_1 :
		return 4 ;
 800054a:	2304      	movs	r3, #4
 800054c:	e01c      	b.n	8000588 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_2 :
		return 8 ;
 800054e:	2308      	movs	r3, #8
 8000550:	e01a      	b.n	8000588 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_3 :
		return 12 ;
 8000552:	230c      	movs	r3, #12
 8000554:	e018      	b.n	8000588 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_4 :
		return 16 ;
 8000556:	2310      	movs	r3, #16
 8000558:	e016      	b.n	8000588 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_5 :
		return 20 ;
 800055a:	2314      	movs	r3, #20
 800055c:	e014      	b.n	8000588 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_6 :
		return 24 ;
 800055e:	2318      	movs	r3, #24
 8000560:	e012      	b.n	8000588 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_7 :
		return 28 ;
 8000562:	231c      	movs	r3, #28
 8000564:	e010      	b.n	8000588 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_8 :
		return 0 ;
 8000566:	2300      	movs	r3, #0
 8000568:	e00e      	b.n	8000588 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_9 :
		return 4 ;
 800056a:	2304      	movs	r3, #4
 800056c:	e00c      	b.n	8000588 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_10 :
		return 8 ;
 800056e:	2308      	movs	r3, #8
 8000570:	e00a      	b.n	8000588 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_11 :
		return 12 ;
 8000572:	230c      	movs	r3, #12
 8000574:	e008      	b.n	8000588 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_12 :
		return 16 ;
 8000576:	2310      	movs	r3, #16
 8000578:	e006      	b.n	8000588 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_13:
		return 20 ;
 800057a:	2314      	movs	r3, #20
 800057c:	e004      	b.n	8000588 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_14 :
		return 24 ;
 800057e:	2318      	movs	r3, #24
 8000580:	e002      	b.n	8000588 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_15 :
		return 28 ;
 8000582:	231c      	movs	r3, #28
 8000584:	e000      	b.n	8000588 <Get_CRLH_Position+0xbc>
		break ;

	}
	return 0 ;
 8000586:	2300      	movs	r3, #0


}
 8000588:	4618      	mov	r0, r3
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	bc80      	pop	{r7}
 8000590:	4770      	bx	lr

08000592 <MCAL_GPIO_Init>:
 * Note					- In STM32F103C6 A , B fully included in LQFP48 Package ,
 * 									     C , D Partial included in LQFP48 Package ,
 * 						      			 E NOT included in LQFP48 Package.
 */

void MCAL_GPIO_Init(GPIO_Typedef *GPIOx ,GPIO_PinConfig_t* PinConfig ) {
 8000592:	b590      	push	{r4, r7, lr}
 8000594:	b085      	sub	sp, #20
 8000596:	af00      	add	r7, sp, #0
 8000598:	6078      	str	r0, [r7, #4]
 800059a:	6039      	str	r1, [r7, #0]
	// Port Configuration register low (GPIOx_CRL) Configure PINs from 0 >>> 7
	// Port Configuration register High (GPIOx_CRH) Configure PINs from 8 >>> 15
	volatile uint32_t* configregister = NULL ;
 800059c:	2300      	movs	r3, #0
 800059e:	60fb      	str	r3, [r7, #12]
	uint8_t PIN_Config = 0 ;
 80005a0:	2300      	movs	r3, #0
 80005a2:	72fb      	strb	r3, [r7, #11]
	configregister = (PinConfig ->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH ; // TO check pin is low(0>>>7) or high(8>>>15)
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	881b      	ldrh	r3, [r3, #0]
 80005a8:	2bff      	cmp	r3, #255	; 0xff
 80005aa:	d801      	bhi.n	80005b0 <MCAL_GPIO_Init+0x1e>
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	e001      	b.n	80005b4 <MCAL_GPIO_Init+0x22>
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	3304      	adds	r3, #4
 80005b4:	60fb      	str	r3, [r7, #12]

	//clear CNF , MODE
	(*configregister) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber)) ;
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	881b      	ldrh	r3, [r3, #0]
 80005ba:	4618      	mov	r0, r3
 80005bc:	f7ff ff86 	bl	80004cc <Get_CRLH_Position>
 80005c0:	4603      	mov	r3, r0
 80005c2:	461a      	mov	r2, r3
 80005c4:	230f      	movs	r3, #15
 80005c6:	4093      	lsls	r3, r2
 80005c8:	43da      	mvns	r2, r3
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	401a      	ands	r2, r3
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	601a      	str	r2, [r3, #0]

	// if pin is output
	if((PinConfig->GPIO_MODE == GPIO_MODE_Output_push_pull ) || (PinConfig->GPIO_MODE == GPIO_MODE_Output_Open_drain ) || (PinConfig->GPIO_MODE == GPIO_MODE_Output_AF_Push_pull ) || (PinConfig->GPIO_MODE == GPIO_MODE_Output_AF_Open_drain  ))
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	789b      	ldrb	r3, [r3, #2]
 80005d8:	2b04      	cmp	r3, #4
 80005da:	d00b      	beq.n	80005f4 <MCAL_GPIO_Init+0x62>
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	789b      	ldrb	r3, [r3, #2]
 80005e0:	2b05      	cmp	r3, #5
 80005e2:	d007      	beq.n	80005f4 <MCAL_GPIO_Init+0x62>
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	789b      	ldrb	r3, [r3, #2]
 80005e8:	2b06      	cmp	r3, #6
 80005ea:	d003      	beq.n	80005f4 <MCAL_GPIO_Init+0x62>
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	789b      	ldrb	r3, [r3, #2]
 80005f0:	2b07      	cmp	r3, #7
 80005f2:	d11c      	bne.n	800062e <MCAL_GPIO_Init+0x9c>
	{
		//Set CNF , MODE
		PIN_Config = ((((PinConfig->GPIO_MODE - 4) << 2 ) | (PinConfig -> GPIO_Output_Speed)) & 0x0f ) ;
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	789b      	ldrb	r3, [r3, #2]
 80005f8:	3b04      	subs	r3, #4
 80005fa:	009b      	lsls	r3, r3, #2
 80005fc:	b25a      	sxtb	r2, r3
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	78db      	ldrb	r3, [r3, #3]
 8000602:	b25b      	sxtb	r3, r3
 8000604:	4313      	orrs	r3, r2
 8000606:	b25b      	sxtb	r3, r3
 8000608:	b2db      	uxtb	r3, r3
 800060a:	f003 030f 	and.w	r3, r3, #15
 800060e:	72fb      	strb	r3, [r7, #11]
		(*configregister) |= ((PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber)) ;
 8000610:	7afc      	ldrb	r4, [r7, #11]
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	881b      	ldrh	r3, [r3, #0]
 8000616:	4618      	mov	r0, r3
 8000618:	f7ff ff58 	bl	80004cc <Get_CRLH_Position>
 800061c:	4603      	mov	r3, r0
 800061e:	fa04 f203 	lsl.w	r2, r4, r3
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	431a      	orrs	r2, r3
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	e057      	b.n	80006de <MCAL_GPIO_Init+0x14c>

	}
	// if pin is output
	else { // MODE  = 00 INPUT RESET STATE
		if((PinConfig->GPIO_MODE == GPIO_MODE_Analog ) ||(PinConfig->GPIO_MODE == GPIO_MODE_Input_Floating ) ){
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	789b      	ldrb	r3, [r3, #2]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d003      	beq.n	800063e <MCAL_GPIO_Init+0xac>
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	789b      	ldrb	r3, [r3, #2]
 800063a:	2b01      	cmp	r3, #1
 800063c:	d115      	bne.n	800066a <MCAL_GPIO_Init+0xd8>
			//Set CNF , MODE
			PIN_Config = ((((PinConfig->GPIO_MODE ) << 2 ) | 0x0 ) & 0x0f ) ;
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	789b      	ldrb	r3, [r3, #2]
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	b2db      	uxtb	r3, r3
 8000646:	f003 030f 	and.w	r3, r3, #15
 800064a:	72fb      	strb	r3, [r7, #11]
			(*configregister) |= ((PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber)) ;
 800064c:	7afc      	ldrb	r4, [r7, #11]
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	881b      	ldrh	r3, [r3, #0]
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff ff3a 	bl	80004cc <Get_CRLH_Position>
 8000658:	4603      	mov	r3, r0
 800065a:	fa04 f203 	lsl.w	r2, r4, r3
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	431a      	orrs	r2, r3
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	e039      	b.n	80006de <MCAL_GPIO_Init+0x14c>

		}else if(PinConfig->GPIO_MODE == GPIO_MODE_Input_AF ){
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	789b      	ldrb	r3, [r3, #2]
 800066e:	2b08      	cmp	r3, #8
 8000670:	d110      	bne.n	8000694 <MCAL_GPIO_Init+0x102>
			//Set CNF , MODE
			PIN_Config = (((GPIO_MODE_Input_AF << 2 ) | 0x0 ) & 0x0f ) ;
 8000672:	2300      	movs	r3, #0
 8000674:	72fb      	strb	r3, [r7, #11]
			(*configregister) |= ((PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber)) ;
 8000676:	7afc      	ldrb	r4, [r7, #11]
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	881b      	ldrh	r3, [r3, #0]
 800067c:	4618      	mov	r0, r3
 800067e:	f7ff ff25 	bl	80004cc <Get_CRLH_Position>
 8000682:	4603      	mov	r3, r0
 8000684:	fa04 f203 	lsl.w	r2, r4, r3
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	431a      	orrs	r2, r3
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	601a      	str	r2, [r3, #0]
			}

		}
	}
	//(*configregister) |= ((PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber)) ;
}
 8000692:	e024      	b.n	80006de <MCAL_GPIO_Init+0x14c>
			PIN_Config = (((GPIO_MODE_Input_pull_up << 2 ) | 0x0 ) & 0x0f)  ;
 8000694:	2308      	movs	r3, #8
 8000696:	72fb      	strb	r3, [r7, #11]
			(*configregister) |= ((PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber)) ;
 8000698:	7afc      	ldrb	r4, [r7, #11]
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	881b      	ldrh	r3, [r3, #0]
 800069e:	4618      	mov	r0, r3
 80006a0:	f7ff ff14 	bl	80004cc <Get_CRLH_Position>
 80006a4:	4603      	mov	r3, r0
 80006a6:	fa04 f203 	lsl.w	r2, r4, r3
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	431a      	orrs	r2, r3
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	601a      	str	r2, [r3, #0]
			if(PinConfig->GPIO_MODE == GPIO_MODE_Input_pull_up){
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	789b      	ldrb	r3, [r3, #2]
 80006b8:	2b02      	cmp	r3, #2
 80006ba:	d107      	bne.n	80006cc <MCAL_GPIO_Init+0x13a>
				GPIOx->ODR |= PinConfig->GPIO_PinNumber ;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	68db      	ldr	r3, [r3, #12]
 80006c0:	683a      	ldr	r2, [r7, #0]
 80006c2:	8812      	ldrh	r2, [r2, #0]
 80006c4:	431a      	orrs	r2, r3
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	60da      	str	r2, [r3, #12]
}
 80006ca:	e008      	b.n	80006de <MCAL_GPIO_Init+0x14c>
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber) ;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	68db      	ldr	r3, [r3, #12]
 80006d0:	683a      	ldr	r2, [r7, #0]
 80006d2:	8812      	ldrh	r2, [r2, #0]
 80006d4:	43d2      	mvns	r2, r2
 80006d6:	401a      	ands	r2, r3
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	60da      	str	r2, [r3, #12]
}
 80006dc:	e7ff      	b.n	80006de <MCAL_GPIO_Init+0x14c>
 80006de:	bf00      	nop
 80006e0:	3714      	adds	r7, #20
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd90      	pop	{r4, r7, pc}
	...

080006e8 <MCAL_I2C_Init>:
 * @retval				-	NONE
 * Note					-	NONE
 *						-
 */
void MCAL_I2C_Init(I2C_Typedef* I2Cx , I2C_PinConfig_t* I2C_Config)
{
 80006e8:	b5b0      	push	{r4, r5, r7, lr}
 80006ea:	b086      	sub	sp, #24
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	6039      	str	r1, [r7, #0]
 • Set the START bit in the I2C_CR1 register to generate a Start condition
 The peripheral input clock frequency must be at least:
 • 2 MHz in SM mode
 • 4 MHz in FM mode
	 */
	uint16_t TmepReg = 0 , FreqRange = 0 ;
 80006f2:	2300      	movs	r3, #0
 80006f4:	82fb      	strh	r3, [r7, #22]
 80006f6:	2300      	movs	r3, #0
 80006f8:	82bb      	strh	r3, [r7, #20]
	uint32_t PCLK1 = 8000000 ;
 80006fa:	4b77      	ldr	r3, [pc, #476]	; (80008d8 <MCAL_I2C_Init+0x1f0>)
 80006fc:	613b      	str	r3, [r7, #16]
	uint16_t Result = 0 ;
 80006fe:	2300      	movs	r3, #0
 8000700:	81fb      	strh	r3, [r7, #14]

	// Enable RCC Clock
	if(I2Cx == I2C1){
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4a75      	ldr	r2, [pc, #468]	; (80008dc <MCAL_I2C_Init+0x1f4>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d110      	bne.n	800072c <MCAL_I2C_Init+0x44>
		Global_I2C_Config[I2C1_Index] = *I2C_Config ;
 800070a:	4a75      	ldr	r2, [pc, #468]	; (80008e0 <MCAL_I2C_Init+0x1f8>)
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	4614      	mov	r4, r2
 8000710:	461d      	mov	r5, r3
 8000712:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000714:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000716:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000718:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800071a:	682b      	ldr	r3, [r5, #0]
 800071c:	6023      	str	r3, [r4, #0]
		RCC_I2C1_CLK_EN() ;
 800071e:	4b71      	ldr	r3, [pc, #452]	; (80008e4 <MCAL_I2C_Init+0x1fc>)
 8000720:	69db      	ldr	r3, [r3, #28]
 8000722:	4a70      	ldr	r2, [pc, #448]	; (80008e4 <MCAL_I2C_Init+0x1fc>)
 8000724:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000728:	61d3      	str	r3, [r2, #28]
 800072a:	e010      	b.n	800074e <MCAL_I2C_Init+0x66>
	}
	else{
		Global_I2C_Config[I2C2_Index] = *I2C_Config ;
 800072c:	4b6c      	ldr	r3, [pc, #432]	; (80008e0 <MCAL_I2C_Init+0x1f8>)
 800072e:	683a      	ldr	r2, [r7, #0]
 8000730:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8000734:	4615      	mov	r5, r2
 8000736:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000738:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800073a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800073c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800073e:	682b      	ldr	r3, [r5, #0]
 8000740:	6023      	str	r3, [r4, #0]
		RCC_I2C2_CLK_EN() ;
 8000742:	4b68      	ldr	r3, [pc, #416]	; (80008e4 <MCAL_I2C_Init+0x1fc>)
 8000744:	69db      	ldr	r3, [r3, #28]
 8000746:	4a67      	ldr	r2, [pc, #412]	; (80008e4 <MCAL_I2C_Init+0x1fc>)
 8000748:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800074c:	61d3      	str	r3, [r2, #28]
	}

	// Check MODE
	if(I2C_Config->I2C_Mode == I2C_Mode_I2C ){ // I2C Standard mode
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	689b      	ldr	r3, [r3, #8]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d17f      	bne.n	8000856 <MCAL_I2C_Init+0x16e>

		// ========================== INIT Timing ==========================
		// -- I2C_CR2 Bits 5:0 FREQ[5:0]: Peripheral clock frequency
		TmepReg = I2Cx->I2C_CR2 ;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	82fb      	strh	r3, [r7, #22]
		// Clear Frequency RREQ[5:0] Bit
		TmepReg &= ~(I2C_CR2_FREQ_Msk) ;
 800075c:	8afb      	ldrh	r3, [r7, #22]
 800075e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000762:	82fb      	strh	r3, [r7, #22]
		// Get PCLK1 Frequency Value
		PCLK1 = MCAL_RCC_Get_PCLK1_Frequency() ;
 8000764:	f000 fb1e 	bl	8000da4 <MCAL_RCC_Get_PCLK1_Frequency>
 8000768:	6138      	str	r0, [r7, #16]
		// Set Frequency bit depending on PCLK1 value
		FreqRange = (uint16_t)(PCLK1 / 1000000) ;
 800076a:	693b      	ldr	r3, [r7, #16]
 800076c:	4a5e      	ldr	r2, [pc, #376]	; (80008e8 <MCAL_I2C_Init+0x200>)
 800076e:	fba2 2303 	umull	r2, r3, r2, r3
 8000772:	0c9b      	lsrs	r3, r3, #18
 8000774:	82bb      	strh	r3, [r7, #20]

		TmepReg |= FreqRange ;
 8000776:	8afa      	ldrh	r2, [r7, #22]
 8000778:	8abb      	ldrh	r3, [r7, #20]
 800077a:	4313      	orrs	r3, r2
 800077c:	82fb      	strh	r3, [r7, #22]
		// Write on I2C CR2
		I2Cx->I2C_CR2 = TmepReg ;
 800077e:	8afa      	ldrh	r2, [r7, #22]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	605a      	str	r2, [r3, #4]

		// Configure Clock control register
		// Disable the selected I2C Peripheral to configure time
		I2Cx->I2C_CR1 &= ~(I2C_CR1_PE) ;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f023 0201 	bic.w	r2, r3, #1
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	601a      	str	r2, [r3, #0]
		TmepReg = 0 ;
 8000790:	2300      	movs	r3, #0
 8000792:	82fb      	strh	r3, [r7, #22]

		// Configure Speed in Standard mode
		if((I2C_Config->I2C_ClockSpeed == I2C_SCLK_SM_50K) || (I2C_Config->I2C_ClockSpeed == I2C_SCLK_SM_100K)){
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f24c 3250 	movw	r2, #50000	; 0xc350
 800079c:	4293      	cmp	r3, r2
 800079e:	d004      	beq.n	80007aa <MCAL_I2C_Init+0xc2>
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a51      	ldr	r2, [pc, #324]	; (80008ec <MCAL_I2C_Init+0x204>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d112      	bne.n	80007d0 <MCAL_I2C_Init+0xe8>
			// Standard mode Speed Calculation
			// TCLK / 2 = CCR * TPCLK1
			// CCR = TCLK / (2 * TPCLK1)
			// CCR = FREQPCLK1 / (2 * I2C_ClockFrequency)
			Result = (uint16_t)(PCLK1 / (I2C_Config->I2C_ClockSpeed << 1 )) ; // I2C_Config->I2C_ClockSpeed << 1  == I2C_Config->I2C_ClockSpeed * 2
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	005b      	lsls	r3, r3, #1
 80007b0:	693a      	ldr	r2, [r7, #16]
 80007b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007b6:	81fb      	strh	r3, [r7, #14]
			TmepReg |= Result ;
 80007b8:	8afa      	ldrh	r2, [r7, #22]
 80007ba:	89fb      	ldrh	r3, [r7, #14]
 80007bc:	4313      	orrs	r3, r2
 80007be:	82fb      	strh	r3, [r7, #22]
			// Write on I2C CCR
			I2Cx->I2C_CCR = TmepReg ;
 80007c0:	8afa      	ldrh	r2, [r7, #22]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	61da      	str	r2, [r3, #28]
		For instance: in Sm mode, the maximum allowed SCL rise time is 1000 ns.
 	 	If, in the I2C_CR2 register, the value of FREQ[5:0] bits is equal to 0x08 and TPCLK1 = 125 ns
 	 	therefore the TRISE[5:0] bits must be programmed with 09h.
 	 	(1000 ns / 125 ns = 8 + 1)
		*/
		I2Cx->I2C_TRISE = FreqRange + 1 ;
 80007c6:	8abb      	ldrh	r3, [r7, #20]
 80007c8:	3301      	adds	r3, #1
 80007ca:	461a      	mov	r2, r3
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	621a      	str	r2, [r3, #32]
		}

		// ========================== I2Cx CR1 Configuration ==========================

		// Get the I2Cx CR1 value
		TmepReg = I2Cx->I2C_CR1 ;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	82fb      	strh	r3, [r7, #22]
		TmepReg |= (uint16_t)(I2C_Config->I2C_ACK_Control | I2C_Config->I2C_Call_Address_Detection | I2C_Config->I2C_Mode | I2C_Config->I2C_STRETCH_Mode) ;
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	699b      	ldr	r3, [r3, #24]
 80007da:	b29a      	uxth	r2, r3
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	69db      	ldr	r3, [r3, #28]
 80007e0:	b29b      	uxth	r3, r3
 80007e2:	4313      	orrs	r3, r2
 80007e4:	b29a      	uxth	r2, r3
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	689b      	ldr	r3, [r3, #8]
 80007ea:	b29b      	uxth	r3, r3
 80007ec:	4313      	orrs	r3, r2
 80007ee:	b29a      	uxth	r2, r3
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	685b      	ldr	r3, [r3, #4]
 80007f4:	b29b      	uxth	r3, r3
 80007f6:	4313      	orrs	r3, r2
 80007f8:	b29a      	uxth	r2, r3
 80007fa:	8afb      	ldrh	r3, [r7, #22]
 80007fc:	4313      	orrs	r3, r2
 80007fe:	82fb      	strh	r3, [r7, #22]

		// Write on I2C CR1
		I2Cx->I2C_CR1 = TmepReg ;
 8000800:	8afa      	ldrh	r2, [r7, #22]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	601a      	str	r2, [r3, #0]

		// ========================== I2Cx OAR1 & OAR2 Configuration ==========================
		TmepReg = 0 ;
 8000806:	2300      	movs	r3, #0
 8000808:	82fb      	strh	r3, [r7, #22]
		if(I2C_Config->I2C_Slave_Address.Enable_Dual_Address == 1){
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	899b      	ldrh	r3, [r3, #12]
 800080e:	2b01      	cmp	r3, #1
 8000810:	d10d      	bne.n	800082e <MCAL_I2C_Init+0x146>
			TmepReg = I2C_OAR2_ENDUAL ;
 8000812:	2301      	movs	r3, #1
 8000814:	82fb      	strh	r3, [r7, #22]
			TmepReg |= I2C_Config->I2C_Slave_Address.Secondary_Slave_Address << I2C_OAR2_ADD2_Pos ; // I2C_Slave_Address.Secondary_Slave_Address << I2C_OAR2_ADD2_Pos     ==    I2C_Slave_Address.Secondary_Slave_Address << 1
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	8a1b      	ldrh	r3, [r3, #16]
 800081a:	005b      	lsls	r3, r3, #1
 800081c:	b21a      	sxth	r2, r3
 800081e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000822:	4313      	orrs	r3, r2
 8000824:	b21b      	sxth	r3, r3
 8000826:	82fb      	strh	r3, [r7, #22]

			// Write on I2C OAR2
			I2Cx->I2C_OAR2 = TmepReg ;
 8000828:	8afa      	ldrh	r2, [r7, #22]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	60da      	str	r2, [r3, #12]

		}

		TmepReg = 0 ;
 800082e:	2300      	movs	r3, #0
 8000830:	82fb      	strh	r3, [r7, #22]
		TmepReg |= I2C_Config->I2C_Slave_Address.Primary_Slave_Address << 1 ;
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	89db      	ldrh	r3, [r3, #14]
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	b21a      	sxth	r2, r3
 800083a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800083e:	4313      	orrs	r3, r2
 8000840:	b21b      	sxth	r3, r3
 8000842:	82fb      	strh	r3, [r7, #22]
		/*
		 Bit 15 ADDMODE Addressing mode (slave mode)
 	 	 	 0: 7-bit slave address (10-bit address not acknowledged)
 	 	 	 1: 10-bit slave address (7-bit address not acknowledged)
		 */
		TmepReg |= I2C_Config->I2C_Slave_Address.I2C_Addressing_Slave_Mode ;
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	695b      	ldr	r3, [r3, #20]
 8000848:	b29a      	uxth	r2, r3
 800084a:	8afb      	ldrh	r3, [r7, #22]
 800084c:	4313      	orrs	r3, r2
 800084e:	82fb      	strh	r3, [r7, #22]
		// Write on I2C OAR1
		I2Cx->I2C_OAR1 = TmepReg ;
 8000850:	8afa      	ldrh	r2, [r7, #22]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	609a      	str	r2, [r3, #8]
	else{
		// SMBus Not Supported yet.
	}

	// Interrupt Mode in Slave ... Check Call Back Pointer != NULL
	if(I2C_Config->P_Slave_Event_CallBack != NULL){ // TAHT ENABLE SLAVE IRQ States MODE
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	6a1b      	ldr	r3, [r3, #32]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d032      	beq.n	80008c4 <MCAL_I2C_Init+0x1dc>
		/*
		 (I2C_CR2) Bit 8 ITERREN: Error interrupt enable
 	 	 0: Error interrupt disabled
 	 	 1: Error interrupt enabled
		 */
		I2Cx->I2C_CR2 = (I2C_CR2_ITERREN) ;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000864:	605a      	str	r2, [r3, #4]
		/*
		 (I2C_CR2) Bit 9 ITEVTEN: Event interrupt enable
 	 	 0: Event interrupt disabled
 	 	 1: Event interrupt enabled
		 */
		I2Cx->I2C_CR2 = (I2C_CR2_ITEVTEN) ;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	f44f 7200 	mov.w	r2, #512	; 0x200
 800086c:	605a      	str	r2, [r3, #4]
		/*
		    (I2C_CR2) Bit 10 ITBUFEN: Buffer interrupt enable
 	 	 	0: TxE = 1 or RxNE = 1 does not generate any interrupt.
 	 	 	1: TxE = 1 or RxNE = 1 generates Event Interrupt (whatever the state of DMAEN)
		 */
		I2Cx->I2C_CR2 = (I2C_CR2_ITBUFEN) ;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000874:	605a      	str	r2, [r3, #4]

		if(I2Cx == I2C1){
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	4a18      	ldr	r2, [pc, #96]	; (80008dc <MCAL_I2C_Init+0x1f4>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d10c      	bne.n	8000898 <MCAL_I2C_Init+0x1b0>
			NVIC_IRQ31_I2C1_EV_Enable ;
 800087e:	4b1c      	ldr	r3, [pc, #112]	; (80008f0 <MCAL_I2C_Init+0x208>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4a1b      	ldr	r2, [pc, #108]	; (80008f0 <MCAL_I2C_Init+0x208>)
 8000884:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000888:	6013      	str	r3, [r2, #0]
			NVIC_IRQ32_I2C1_ER_Enable ;
 800088a:	4b1a      	ldr	r3, [pc, #104]	; (80008f4 <MCAL_I2C_Init+0x20c>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4a19      	ldr	r2, [pc, #100]	; (80008f4 <MCAL_I2C_Init+0x20c>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	6013      	str	r3, [r2, #0]
 8000896:	e00f      	b.n	80008b8 <MCAL_I2C_Init+0x1d0>

		}
		else if (I2Cx == I2C2){
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	4a17      	ldr	r2, [pc, #92]	; (80008f8 <MCAL_I2C_Init+0x210>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d10b      	bne.n	80008b8 <MCAL_I2C_Init+0x1d0>
			NVIC_IRQ33_I2C2_EV_Enable ;
 80008a0:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <MCAL_I2C_Init+0x20c>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a13      	ldr	r2, [pc, #76]	; (80008f4 <MCAL_I2C_Init+0x20c>)
 80008a6:	f043 0302 	orr.w	r3, r3, #2
 80008aa:	6013      	str	r3, [r2, #0]
			NVIC_IRQ34_I2C2_ER_Enable ;
 80008ac:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <MCAL_I2C_Init+0x20c>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a10      	ldr	r2, [pc, #64]	; (80008f4 <MCAL_I2C_Init+0x20c>)
 80008b2:	f043 0304 	orr.w	r3, r3, #4
 80008b6:	6013      	str	r3, [r2, #0]
		}
		I2Cx->I2C_SR1 = 0 ;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2200      	movs	r2, #0
 80008bc:	615a      	str	r2, [r3, #20]
		I2Cx->I2C_SR2 = 0 ;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]

	}

	// Enable I2C peripheral
	I2Cx->I2C_CR1 |= I2C_CR1_PE ;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f043 0201 	orr.w	r2, r3, #1
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	601a      	str	r2, [r3, #0]

}
 80008d0:	bf00      	nop
 80008d2:	3718      	adds	r7, #24
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bdb0      	pop	{r4, r5, r7, pc}
 80008d8:	007a1200 	.word	0x007a1200
 80008dc:	40005400 	.word	0x40005400
 80008e0:	2000001c 	.word	0x2000001c
 80008e4:	40021000 	.word	0x40021000
 80008e8:	431bde83 	.word	0x431bde83
 80008ec:	000186a0 	.word	0x000186a0
 80008f0:	e000e100 	.word	0xe000e100
 80008f4:	e000e104 	.word	0xe000e104
 80008f8:	40005800 	.word	0x40005800

080008fc <MCAL_I2C_GPIO_Set_Pins>:
 * Note					-	NONE
 *						-
 */

void MCAL_I2C_GPIO_Set_Pins(I2C_Typedef* I2Cx)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]

	// IN General
//	I2Cx_SCL	I2C clock		Alternate function open drain
//	I2Cx_SDA	I2C Data I/O	Alternate function open drain

	if(I2Cx == I2C1){
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	4a1f      	ldr	r2, [pc, #124]	; (8000984 <MCAL_I2C_GPIO_Set_Pins+0x88>)
 8000908:	4293      	cmp	r3, r2
 800090a:	d118      	bne.n	800093e <MCAL_I2C_GPIO_Set_Pins+0x42>
		// I2C1
		//	IN AFIO I2C1_SCL 	 IN 	 PB6
		//	IN AFIO I2C1_SDA  	 IN 	 PB7

		PINCF.GPIO_PinNumber = 	GPIO_PIN_6 ;
 800090c:	2340      	movs	r3, #64	; 0x40
 800090e:	81bb      	strh	r3, [r7, #12]
		PINCF.GPIO_MODE = GPIO_MODE_Output_AF_Open_drain ;
 8000910:	2307      	movs	r3, #7
 8000912:	73bb      	strb	r3, [r7, #14]
		PINCF.GPIO_Output_Speed = GPIO_Output_Speed_10M ;
 8000914:	2301      	movs	r3, #1
 8000916:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PINCF) ;
 8000918:	f107 030c 	add.w	r3, r7, #12
 800091c:	4619      	mov	r1, r3
 800091e:	481a      	ldr	r0, [pc, #104]	; (8000988 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 8000920:	f7ff fe37 	bl	8000592 <MCAL_GPIO_Init>

		PINCF.GPIO_PinNumber = 	GPIO_PIN_7 ;
 8000924:	2380      	movs	r3, #128	; 0x80
 8000926:	81bb      	strh	r3, [r7, #12]
		PINCF.GPIO_MODE = GPIO_MODE_Output_AF_Open_drain ;
 8000928:	2307      	movs	r3, #7
 800092a:	73bb      	strb	r3, [r7, #14]
		PINCF.GPIO_Output_Speed = GPIO_Output_Speed_10M ;
 800092c:	2301      	movs	r3, #1
 800092e:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PINCF) ;
 8000930:	f107 030c 	add.w	r3, r7, #12
 8000934:	4619      	mov	r1, r3
 8000936:	4814      	ldr	r0, [pc, #80]	; (8000988 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 8000938:	f7ff fe2b 	bl	8000592 <MCAL_GPIO_Init>
		PINCF.GPIO_Output_Speed = GPIO_Output_Speed_10M ;
		MCAL_GPIO_Init(GPIOB, &PINCF) ;


	}
}
 800093c:	e01d      	b.n	800097a <MCAL_I2C_GPIO_Set_Pins+0x7e>
	else if(I2Cx == I2C2){
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4a12      	ldr	r2, [pc, #72]	; (800098c <MCAL_I2C_GPIO_Set_Pins+0x90>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d119      	bne.n	800097a <MCAL_I2C_GPIO_Set_Pins+0x7e>
		PINCF.GPIO_PinNumber = 	GPIO_PIN_10 ;
 8000946:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800094a:	81bb      	strh	r3, [r7, #12]
		PINCF.GPIO_MODE = GPIO_MODE_Output_AF_Open_drain ;
 800094c:	2307      	movs	r3, #7
 800094e:	73bb      	strb	r3, [r7, #14]
		PINCF.GPIO_Output_Speed = GPIO_Output_Speed_10M ;
 8000950:	2301      	movs	r3, #1
 8000952:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PINCF) ;
 8000954:	f107 030c 	add.w	r3, r7, #12
 8000958:	4619      	mov	r1, r3
 800095a:	480b      	ldr	r0, [pc, #44]	; (8000988 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 800095c:	f7ff fe19 	bl	8000592 <MCAL_GPIO_Init>
		PINCF.GPIO_PinNumber = 	GPIO_PIN_11 ;
 8000960:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000964:	81bb      	strh	r3, [r7, #12]
		PINCF.GPIO_MODE = GPIO_MODE_Output_AF_Open_drain ;
 8000966:	2307      	movs	r3, #7
 8000968:	73bb      	strb	r3, [r7, #14]
		PINCF.GPIO_Output_Speed = GPIO_Output_Speed_10M ;
 800096a:	2301      	movs	r3, #1
 800096c:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PINCF) ;
 800096e:	f107 030c 	add.w	r3, r7, #12
 8000972:	4619      	mov	r1, r3
 8000974:	4804      	ldr	r0, [pc, #16]	; (8000988 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 8000976:	f7ff fe0c 	bl	8000592 <MCAL_GPIO_Init>
}
 800097a:	bf00      	nop
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40005400 	.word	0x40005400
 8000988:	40010c00 	.word	0x40010c00
 800098c:	40005800 	.word	0x40005800

08000990 <MCAL_I2C_Master_Receive_Data_RX>:
 * Note					-	NONE
 *						-
 */

void MCAL_I2C_Master_Receive_Data_RX(I2C_Typedef* I2Cx , uint16_t DevAddress , uint8_t* DataOut , uint32_t DataLen , Stop_Condation Stop , Repeated_Start Start)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b086      	sub	sp, #24
 8000994:	af00      	add	r7, sp, #0
 8000996:	60f8      	str	r0, [r7, #12]
 8000998:	607a      	str	r2, [r7, #4]
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	460b      	mov	r3, r1
 800099e:	817b      	strh	r3, [r7, #10]
	int i = 0 ; // length
 80009a0:	2300      	movs	r3, #0
 80009a2:	617b      	str	r3, [r7, #20]
	uint8_t indix = I2Cx == I2C1 ? I2C1_Index : I2C2_Index ;
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	4a30      	ldr	r2, [pc, #192]	; (8000a68 <MCAL_I2C_Master_Receive_Data_RX+0xd8>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	bf14      	ite	ne
 80009ac:	2301      	movne	r3, #1
 80009ae:	2300      	moveq	r3, #0
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	74fb      	strb	r3, [r7, #19]

	// 1- Set the Start Bit in The I2C_CR1 Register to Generate a Start Condition .
	I2C_Generate_Start(I2Cx , enable , Start) ;
 80009b4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80009b8:	461a      	mov	r2, r3
 80009ba:	2101      	movs	r1, #1
 80009bc:	68f8      	ldr	r0, [r7, #12]
 80009be:	f000 f8c9 	bl	8000b54 <I2C_Generate_Start>
	// 			  sequence can not be managed before the current byte end of transfer, it is recommended to use BTF instead
	//			  of TXE with the drawback of slowing the communication.

	// 2- Wait for EV5
	// EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address.
	while(!I2C_Get_Flag_Status(I2Cx, EV5)) ;
 80009c2:	bf00      	nop
 80009c4:	2101      	movs	r1, #1
 80009c6:	68f8      	ldr	r0, [r7, #12]
 80009c8:	f000 f926 	bl	8000c18 <I2C_Get_Flag_Status>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d0f8      	beq.n	80009c4 <MCAL_I2C_Master_Receive_Data_RX+0x34>

	// 2.1- Send Address
	I2C_Send_Address(I2Cx , DevAddress , I2C_Direction_Receiver ) ; // Address
 80009d2:	897b      	ldrh	r3, [r7, #10]
 80009d4:	2201      	movs	r2, #1
 80009d6:	4619      	mov	r1, r3
 80009d8:	68f8      	ldr	r0, [r7, #12]
 80009da:	f000 f8e2 	bl	8000ba2 <I2C_Send_Address>

	// 3- Wait for EV6
	// EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2.
	while(!I2C_Get_Flag_Status(I2Cx, EV6)) ;
 80009de:	bf00      	nop
 80009e0:	2102      	movs	r1, #2
 80009e2:	68f8      	ldr	r0, [r7, #12]
 80009e4:	f000 f918 	bl	8000c18 <I2C_Get_Flag_Status>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d0f8      	beq.n	80009e0 <MCAL_I2C_Master_Receive_Data_RX+0x50>

	if(DataLen){
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d01c      	beq.n	8000a2e <MCAL_I2C_Master_Receive_Data_RX+0x9e>
		// Read Data until Length Become Zero
		for(i = DataLen ; i > 1 ; i-- ){
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	617b      	str	r3, [r7, #20]
 80009f8:	e012      	b.n	8000a20 <MCAL_I2C_Master_Receive_Data_RX+0x90>
			// wait until RXNE Become 1
			while(!I2C_Get_Flag_Status(I2Cx, EV7)) ;
 80009fa:	bf00      	nop
 80009fc:	2103      	movs	r1, #3
 80009fe:	68f8      	ldr	r0, [r7, #12]
 8000a00:	f000 f90a 	bl	8000c18 <I2C_Get_Flag_Status>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d0f8      	beq.n	80009fc <MCAL_I2C_Master_Receive_Data_RX+0x6c>
			// Read Data from data register into buffer
			*DataOut = I2Cx->I2C_DR ;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	691b      	ldr	r3, [r3, #16]
 8000a0e:	b2da      	uxtb	r2, r3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	701a      	strb	r2, [r3, #0]
			// Increment the Buffer address
			DataOut ++ ;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	3301      	adds	r3, #1
 8000a18:	607b      	str	r3, [r7, #4]
		for(i = DataLen ; i > 1 ; i-- ){
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	3b01      	subs	r3, #1
 8000a1e:	617b      	str	r3, [r7, #20]
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	dce9      	bgt.n	80009fa <MCAL_I2C_Master_Receive_Data_RX+0x6a>
		}

		I2C_AcknowledgeConfig(I2Cx , disable) ;
 8000a26:	2100      	movs	r1, #0
 8000a28:	68f8      	ldr	r0, [r7, #12]
 8000a2a:	f000 f821 	bl	8000a70 <I2C_AcknowledgeConfig>
	}

	if(Stop == With_Stop){
 8000a2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d103      	bne.n	8000a3e <MCAL_I2C_Master_Receive_Data_RX+0xae>
		// 7. Send Stop Configuration
		I2C_Generate_Stop(I2Cx, enable) ;
 8000a36:	2101      	movs	r1, #1
 8000a38:	68f8      	ldr	r0, [r7, #12]
 8000a3a:	f000 f8d1 	bl	8000be0 <I2C_Generate_Stop>
	}

	// Re-Enable ACKing
	if(Global_I2C_Config[indix].I2C_ACK_Control == I2C_ACK_Control_Enable){
 8000a3e:	7cfa      	ldrb	r2, [r7, #19]
 8000a40:	490a      	ldr	r1, [pc, #40]	; (8000a6c <MCAL_I2C_Master_Receive_Data_RX+0xdc>)
 8000a42:	4613      	mov	r3, r2
 8000a44:	00db      	lsls	r3, r3, #3
 8000a46:	4413      	add	r3, r2
 8000a48:	009b      	lsls	r3, r3, #2
 8000a4a:	440b      	add	r3, r1
 8000a4c:	3318      	adds	r3, #24
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a54:	d103      	bne.n	8000a5e <MCAL_I2C_Master_Receive_Data_RX+0xce>
		I2C_AcknowledgeConfig(I2Cx , enable) ;
 8000a56:	2101      	movs	r1, #1
 8000a58:	68f8      	ldr	r0, [r7, #12]
 8000a5a:	f000 f809 	bl	8000a70 <I2C_AcknowledgeConfig>

	}
}
 8000a5e:	bf00      	nop
 8000a60:	3718      	adds	r7, #24
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40005400 	.word	0x40005400
 8000a6c:	2000001c 	.word	0x2000001c

08000a70 <I2C_AcknowledgeConfig>:

void I2C_AcknowledgeConfig(I2C_Typedef* I2Cx  , Functional_State NewState)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	460b      	mov	r3, r1
 8000a7a:	70fb      	strb	r3, [r7, #3]
	/*Bit 10 ACK: Acknowledge enable
	This bit is set and cleared by software and cleared by hardware when PE=0.
	0: No acknowledge returned
	1: Acknowledge returned after a byte is received (matched address or data)*/

	if(NewState == enable)
 8000a7c:	78fb      	ldrb	r3, [r7, #3]
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d106      	bne.n	8000a90 <I2C_AcknowledgeConfig+0x20>
	{
		I2Cx->I2C_CR1 |=(I2C_CR1_ACK);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	601a      	str	r2, [r3, #0]
	else
	{
		I2Cx->I2C_CR1 &=~(I2C_CR1_ACK);
	}

}
 8000a8e:	e005      	b.n	8000a9c <I2C_AcknowledgeConfig+0x2c>
		I2Cx->I2C_CR1 &=~(I2C_CR1_ACK);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	601a      	str	r2, [r3, #0]
}
 8000a9c:	bf00      	nop
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bc80      	pop	{r7}
 8000aa4:	4770      	bx	lr
	...

08000aa8 <MCAL_I2C_Master_Send_Data_TX>:
 * Note					-	NONE
 *						-
 */

void MCAL_I2C_Master_Send_Data_TX(I2C_Typedef* I2Cx , uint16_t DevAddress , uint8_t* DataOut , uint32_t DataLen , Stop_Condation Stop , Repeated_Start Start)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	607a      	str	r2, [r7, #4]
 8000ab2:	603b      	str	r3, [r7, #0]
 8000ab4:	460b      	mov	r3, r1
 8000ab6:	817b      	strh	r3, [r7, #10]
	int i = 0 ; // length
 8000ab8:	2300      	movs	r3, #0
 8000aba:	617b      	str	r3, [r7, #20]
	// Support Timeout (Configure Timer working for specific duration Rise Interrupt
	// Timer_interrupt(){Flag = 1 }
	// So any Exist in while(check flag || any Polling Condition)

	// 1- Set the Start Bit in The I2C_CR1 Register to Generate a Start Condition .
	I2C_Generate_Start(I2Cx , enable , Start) ;
 8000abc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	68f8      	ldr	r0, [r7, #12]
 8000ac6:	f000 f845 	bl	8000b54 <I2C_Generate_Start>
	// 			  sequence can not be managed before the current byte end of transfer, it is recommended to use BTF instead
	//			  of TXE with the drawback of slowing the communication.

	// 2- Wait for EV5
	// EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address.
	while(!I2C_Get_Flag_Status(I2Cx, EV5)) ;
 8000aca:	bf00      	nop
 8000acc:	2101      	movs	r1, #1
 8000ace:	68f8      	ldr	r0, [r7, #12]
 8000ad0:	f000 f8a2 	bl	8000c18 <I2C_Get_Flag_Status>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d0f8      	beq.n	8000acc <MCAL_I2C_Master_Send_Data_TX+0x24>

	// 2.1- Send Address
	I2C_Send_Address(I2Cx , DevAddress , I2C_Direction_Transmitter ) ; // Address
 8000ada:	897b      	ldrh	r3, [r7, #10]
 8000adc:	2200      	movs	r2, #0
 8000ade:	4619      	mov	r1, r3
 8000ae0:	68f8      	ldr	r0, [r7, #12]
 8000ae2:	f000 f85e 	bl	8000ba2 <I2C_Send_Address>

	// 3- Wait for EV6
	// EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2.
	while(!I2C_Get_Flag_Status(I2Cx, EV6)) ;
 8000ae6:	bf00      	nop
 8000ae8:	2102      	movs	r1, #2
 8000aea:	68f8      	ldr	r0, [r7, #12]
 8000aec:	f000 f894 	bl	8000c18 <I2C_Get_Flag_Status>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d0f8      	beq.n	8000ae8 <MCAL_I2C_Master_Send_Data_TX+0x40>

	// 4- TRA , Busy , MSL , TX Flags
	while(!I2C_Get_Flag_Status(I2Cx, MASTER_BITE_Transmitter)) ;
 8000af6:	bf00      	nop
 8000af8:	4915      	ldr	r1, [pc, #84]	; (8000b50 <MCAL_I2C_Master_Send_Data_TX+0xa8>)
 8000afa:	68f8      	ldr	r0, [r7, #12]
 8000afc:	f000 f88c 	bl	8000c18 <I2C_Get_Flag_Status>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d0f8      	beq.n	8000af8 <MCAL_I2C_Master_Send_Data_TX+0x50>

	for (i = 0 ; i < DataLen ; i++)
 8000b06:	2300      	movs	r3, #0
 8000b08:	617b      	str	r3, [r7, #20]
 8000b0a:	e011      	b.n	8000b30 <MCAL_I2C_Master_Send_Data_TX+0x88>
	{
		// write in DR register the data to be send
		I2Cx->I2C_DR = DataOut[i] ;
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	4413      	add	r3, r2
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	461a      	mov	r2, r3
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	611a      	str	r2, [r3, #16]
		// Wait for EV8
		// EV8: TxE=1, shift register not empty, data register empty, cleared by writing DR register
		while(!I2C_Get_Flag_Status(I2Cx, EV8)) ;
 8000b1a:	bf00      	nop
 8000b1c:	2105      	movs	r1, #5
 8000b1e:	68f8      	ldr	r0, [r7, #12]
 8000b20:	f000 f87a 	bl	8000c18 <I2C_Get_Flag_Status>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d0f8      	beq.n	8000b1c <MCAL_I2C_Master_Send_Data_TX+0x74>
	for (i = 0 ; i < DataLen ; i++)
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	617b      	str	r3, [r7, #20]
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	683a      	ldr	r2, [r7, #0]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d8e9      	bhi.n	8000b0c <MCAL_I2C_Master_Send_Data_TX+0x64>
	}
	// Wait for EV8_2
	// TxE=1, BTF = 1, Program Stop request. TxE and BTF are cleared by hardware by the Stop condition
	// while(!I2C_Get_Flag_Status(I2Cx, EV8_2)) ;

	if(Stop == With_Stop ){
 8000b38:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d103      	bne.n	8000b48 <MCAL_I2C_Master_Send_Data_TX+0xa0>
		I2C_Generate_Stop(I2Cx , enable) ;
 8000b40:	2101      	movs	r1, #1
 8000b42:	68f8      	ldr	r0, [r7, #12]
 8000b44:	f000 f84c 	bl	8000be0 <I2C_Generate_Stop>
	}

}
 8000b48:	bf00      	nop
 8000b4a:	3718      	adds	r7, #24
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	00070080 	.word	0x00070080

08000b54 <I2C_Generate_Start>:
 * Note					-	NONE
 *						-
 */

void I2C_Generate_Start(I2C_Typedef* I2Cx , Functional_State NewState , Repeated_Start Start )
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	70fb      	strb	r3, [r7, #3]
 8000b60:	4613      	mov	r3, r2
 8000b62:	70bb      	strb	r3, [r7, #2]
	if(Start != RepeatedStart){
 8000b64:	78bb      	ldrb	r3, [r7, #2]
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d007      	beq.n	8000b7a <I2C_Generate_Start+0x26>
		// check if Bus is Idle
		while(I2C_Get_Flag_Status(I2Cx, I2C_Flag_Busy)) ;
 8000b6a:	bf00      	nop
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f000 f852 	bl	8000c18 <I2C_Get_Flag_Status>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d1f8      	bne.n	8000b6c <I2C_Generate_Start+0x18>
//	 0: No Start generation
//	 1: Repeated start generation
//	 In Slave mode:
//	 0: No Start generation
//	 1: Start generation when the bus is free
	if(NewState != disable)
 8000b7a:	78fb      	ldrb	r3, [r7, #3]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d006      	beq.n	8000b8e <I2C_Generate_Start+0x3a>
	{
		// Generate The start Condition
		I2Cx->I2C_CR1 |= I2C_CR1_START ;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	601a      	str	r2, [r3, #0]
		I2Cx->I2C_CR1 &= ~(I2C_CR1_START) ;
	}



}
 8000b8c:	e005      	b.n	8000b9a <I2C_Generate_Start+0x46>
		I2Cx->I2C_CR1 &= ~(I2C_CR1_START) ;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	601a      	str	r2, [r3, #0]
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <I2C_Send_Address>:

void I2C_Send_Address( I2C_Typedef* I2Cx , uint16_t Address , I2C_Direction Direction)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	b083      	sub	sp, #12
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
 8000baa:	460b      	mov	r3, r1
 8000bac:	807b      	strh	r3, [r7, #2]
 8000bae:	4613      	mov	r3, r2
 8000bb0:	707b      	strb	r3, [r7, #1]
//	else{
////		Not Supporter I2C_Addressing_Slave_Mode_10Bit yet
//	}

	// In This Case just Supported 7 Bit so Work in Function without any Conditions.
	Address = (Address << 1) ;
 8000bb2:	887b      	ldrh	r3, [r7, #2]
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	807b      	strh	r3, [r7, #2]
	if(Direction != I2C_Direction_Transmitter)
 8000bb8:	787b      	ldrb	r3, [r7, #1]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d004      	beq.n	8000bc8 <I2C_Send_Address+0x26>
	{
		// Set Address bit 0  for Read
		Address |= 1<<0 ;
 8000bbe:	887b      	ldrh	r3, [r7, #2]
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	807b      	strh	r3, [r7, #2]
 8000bc6:	e003      	b.n	8000bd0 <I2C_Send_Address+0x2e>
	}
	else
	{
		// Reset Address bit 0 for write
		Address &= ~(1<<0) ;
 8000bc8:	887b      	ldrh	r3, [r7, #2]
 8000bca:	f023 0301 	bic.w	r3, r3, #1
 8000bce:	807b      	strh	r3, [r7, #2]
	}

	// Send the Address
	I2Cx->I2C_DR = Address ;
 8000bd0:	887a      	ldrh	r2, [r7, #2]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	611a      	str	r2, [r3, #16]

}
 8000bd6:	bf00      	nop
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr

08000be0 <I2C_Generate_Stop>:

void I2C_Generate_Stop(I2C_Typedef* I2Cx , Functional_State NewState )
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	460b      	mov	r3, r1
 8000bea:	70fb      	strb	r3, [r7, #3]
	if(NewState != disable)
 8000bec:	78fb      	ldrb	r3, [r7, #3]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d006      	beq.n	8000c00 <I2C_Generate_Stop+0x20>
	{
		//Enable Stop
		I2Cx->I2C_CR1 |= I2C_CR1_STOP ;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	601a      	str	r2, [r3, #0]
	{
		//Disable Stop
		I2Cx->I2C_CR1 &= ~(I2C_CR1_STOP) ;
	}

}
 8000bfe:	e005      	b.n	8000c0c <I2C_Generate_Stop+0x2c>
		I2Cx->I2C_CR1 &= ~(I2C_CR1_STOP) ;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	601a      	str	r2, [r3, #0]
}
 8000c0c:	bf00      	nop
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bc80      	pop	{r7}
 8000c14:	4770      	bx	lr
	...

08000c18 <I2C_Get_Flag_Status>:

FlagStatus I2C_Get_Flag_Status( I2C_Typedef* I2Cx , Status flag )
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b089      	sub	sp, #36	; 0x24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	6039      	str	r1, [r7, #0]
	volatile uint32_t  dummyRead ;
	FlagStatus Bitstatus = Reset ;
 8000c22:	2300      	movs	r3, #0
 8000c24:	77fb      	strb	r3, [r7, #31]
	uint32_t  Flag1 = 0 , Flag2 = 0 ;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61bb      	str	r3, [r7, #24]
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]
	uint32_t lastEvent = 0 ;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]

	switch(flag)
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	2b03      	cmp	r3, #3
 8000c36:	d057      	beq.n	8000ce8 <I2C_Get_Flag_Status+0xd0>
 8000c38:	2b03      	cmp	r3, #3
 8000c3a:	d804      	bhi.n	8000c46 <I2C_Get_Flag_Status+0x2e>
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d014      	beq.n	8000c6a <I2C_Get_Flag_Status+0x52>
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d81e      	bhi.n	8000c82 <I2C_Get_Flag_Status+0x6a>
 8000c44:	e005      	b.n	8000c52 <I2C_Get_Flag_Status+0x3a>
 8000c46:	2b05      	cmp	r3, #5
 8000c48:	d942      	bls.n	8000cd0 <I2C_Get_Flag_Status+0xb8>
 8000c4a:	4a30      	ldr	r2, [pc, #192]	; (8000d0c <I2C_Get_Flag_Status+0xf4>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d024      	beq.n	8000c9a <I2C_Get_Flag_Status+0x82>
 8000c50:	e056      	b.n	8000d00 <I2C_Get_Flag_Status+0xe8>
// 	 	1: Communication ongoing on the bus
// 	 	– Set by hardware on detection of SDA or SCL low
//      – cleared by hardware on detection of a Stop condition.
//		It indicates a communication in progress on the bus. This information is still updated when
//		the interface is disabled (PE=0).
		if((I2Cx->I2C_SR2) & (I2C_SR2_BUSY))
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	699b      	ldr	r3, [r3, #24]
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d002      	beq.n	8000c64 <I2C_Get_Flag_Status+0x4c>
			Bitstatus = Set ;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	77fb      	strb	r3, [r7, #31]
		else
			Bitstatus = Reset ;
		break ;
 8000c62:	e04d      	b.n	8000d00 <I2C_Get_Flag_Status+0xe8>
			Bitstatus = Reset ;
 8000c64:	2300      	movs	r3, #0
 8000c66:	77fb      	strb	r3, [r7, #31]
		break ;
 8000c68:	e04a      	b.n	8000d00 <I2C_Get_Flag_Status+0xe8>
//		(I2C_SR1) Bit 0 SB: Start bit (Master mode)
//		0: No Start condition
//		1: Start condition generated.– Set when a Start condition generated.
//		– Cleared by software by reading the SR1 register followed by writing the DR register, or by
//		hardware when PE=0
		if((I2Cx->I2C_SR1) & (I2C_SR1_SB))
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	695b      	ldr	r3, [r3, #20]
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d002      	beq.n	8000c7c <I2C_Get_Flag_Status+0x64>
			Bitstatus = Set ;
 8000c76:	2301      	movs	r3, #1
 8000c78:	77fb      	strb	r3, [r7, #31]
		else
			Bitstatus = Reset ;
		break ;
 8000c7a:	e041      	b.n	8000d00 <I2C_Get_Flag_Status+0xe8>
			Bitstatus = Reset ;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	77fb      	strb	r3, [r7, #31]
		break ;
 8000c80:	e03e      	b.n	8000d00 <I2C_Get_Flag_Status+0xe8>
//		This bit is cleared by software reading SR1 register followed reading SR2, or by hardware
//		when PE=0.
//		Address matched (Slave)
//		0: Address mismatched or not received.
//		1: Received address matched.
		if((I2Cx->I2C_SR1) & (I2C_SR1_ADDR))
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	695b      	ldr	r3, [r3, #20]
 8000c86:	f003 0302 	and.w	r3, r3, #2
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d002      	beq.n	8000c94 <I2C_Get_Flag_Status+0x7c>
			Bitstatus = Set ;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	77fb      	strb	r3, [r7, #31]

////		Note: Reading I2C_SR2 after reading I2C_SR1 clears the ADDR flag, even if the ADDR flag was
////		set after reading I2C_SR1. Consequently, I2C_SR2 must be read only when ADDR is found
////		set in I2C_SR1 or when the STOPF bit is cleared.
//		dummyRead = I2Cx->I2C_SR2 ;
		break ;
 8000c92:	e035      	b.n	8000d00 <I2C_Get_Flag_Status+0xe8>
			Bitstatus = Reset ;
 8000c94:	2300      	movs	r3, #0
 8000c96:	77fb      	strb	r3, [r7, #31]
		break ;
 8000c98:	e032      	b.n	8000d00 <I2C_Get_Flag_Status+0xe8>
	}
	case MASTER_BITE_Transmitter :
	{
		// Read I2C state register
		Flag1 = I2Cx->I2C_SR1 ;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	695b      	ldr	r3, [r3, #20]
 8000c9e:	61bb      	str	r3, [r7, #24]
		Flag2 = I2Cx->I2C_SR2 ;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	617b      	str	r3, [r7, #20]
		Flag2 = Flag2 << 16 ;
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	041b      	lsls	r3, r3, #16
 8000caa:	617b      	str	r3, [r7, #20]
		// Get the last event value from I2C state register
		lastEvent = (Flag1 | Flag2) & ((uint32_t)0x00FFFFFF) ;
 8000cac:	69ba      	ldr	r2, [r7, #24]
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000cb6:	613b      	str	r3, [r7, #16]
		//check whether the last event contains the I2C_EVENT
		if((lastEvent & flag) == flag)
 8000cb8:	693a      	ldr	r2, [r7, #16]
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	683a      	ldr	r2, [r7, #0]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d102      	bne.n	8000cca <I2C_Get_Flag_Status+0xb2>
			Bitstatus = Set ;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	77fb      	strb	r3, [r7, #31]
		else
			Bitstatus = Reset ;
		break ;
 8000cc8:	e01a      	b.n	8000d00 <I2C_Get_Flag_Status+0xe8>
			Bitstatus = Reset ;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	77fb      	strb	r3, [r7, #31]
		break ;
 8000cce:	e017      	b.n	8000d00 <I2C_Get_Flag_Status+0xe8>
	case EV8_1 :	//	TxE=1, shift register empty, data register empty, write Data1 in DR.
	{
		//		(I2C_SR1)  Bit 7 TxE: Data register empty (transmitters)
		//		0: Data register not empty
		//		1: Data register empty
		if((I2Cx->I2C_SR1) &(I2C_SR1_TXE))
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	695b      	ldr	r3, [r3, #20]
 8000cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d002      	beq.n	8000ce2 <I2C_Get_Flag_Status+0xca>
			Bitstatus = Set ;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	77fb      	strb	r3, [r7, #31]
		else
			Bitstatus = Reset ;
		break ;
 8000ce0:	e00e      	b.n	8000d00 <I2C_Get_Flag_Status+0xe8>
			Bitstatus = Reset ;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	77fb      	strb	r3, [r7, #31]
		break ;
 8000ce6:	e00b      	b.n	8000d00 <I2C_Get_Flag_Status+0xe8>
		//		 1: Data register not empty
		//		  – Set when data register is not empty in receiver mode. RxNE is not set during address phase.
		//		  – Cleared by software reading or writing the DR register or by hardware when PE=0.
		//		 RxNE is not set in case of ARLO event.
		//       Note: RxNE is not cleared by reading data when BTF is set, as the data register is still full.
		if((I2Cx->I2C_SR1) &(I2C_SR1_RXNE))
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	695b      	ldr	r3, [r3, #20]
 8000cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d002      	beq.n	8000cfa <I2C_Get_Flag_Status+0xe2>
			Bitstatus = Set ;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	77fb      	strb	r3, [r7, #31]
		else
			Bitstatus = Reset ;
		break ;
 8000cf8:	e001      	b.n	8000cfe <I2C_Get_Flag_Status+0xe6>
			Bitstatus = Reset ;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	77fb      	strb	r3, [r7, #31]
		break ;
 8000cfe:	bf00      	nop

	}

	}
	return Bitstatus ;
 8000d00:	7ffb      	ldrb	r3, [r7, #31]
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3724      	adds	r7, #36	; 0x24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr
 8000d0c:	00070080 	.word	0x00070080

08000d10 <I2C1_EV_IRQHandler>:
// ******************************* ISR *******************************

//				Note :	Working on to Compete but Not Now ...

void I2C1_EV_IRQHandler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
//	temp2 = I2Cx->I2C_CR2 & (I2C_CR2_ITBUFEN) ;
//	temp3 = I2Cx->I2C_SR1 & (I2C_SR1_STOPF) ;


	//	Working on to Compete but Not Now ...
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr

08000d1c <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0

}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr

08000d28 <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0

}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bc80      	pop	{r7}
 8000d32:	4770      	bx	lr

08000d34 <I2C2_ER_IRQHandler>:

void I2C2_ER_IRQHandler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0

}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr

08000d40 <MCAL_RCC_Get_System_CLK_Frequency>:
 *
 *
 */

uint32_t MCAL_RCC_Get_System_CLK_Frequency(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
00: HSI oscillator used as system clock
01: HSE oscillator used as system clock
10: PLL used as system clock
11: not applicable
*/
	switch((RCC->CFGR >> 2) & 0b11)
 8000d44:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <MCAL_RCC_Get_System_CLK_Frequency+0x30>)
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	089b      	lsrs	r3, r3, #2
 8000d4a:	f003 0303 	and.w	r3, r3, #3
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d006      	beq.n	8000d60 <MCAL_RCC_Get_System_CLK_Frequency+0x20>
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d302      	bcc.n	8000d5c <MCAL_RCC_Get_System_CLK_Frequency+0x1c>
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	d004      	beq.n	8000d64 <MCAL_RCC_Get_System_CLK_Frequency+0x24>
 8000d5a:	e005      	b.n	8000d68 <MCAL_RCC_Get_System_CLK_Frequency+0x28>
	{
		case 0:
			return HSI_RC_CLK ;
 8000d5c:	4b05      	ldr	r3, [pc, #20]	; (8000d74 <MCAL_RCC_Get_System_CLK_Frequency+0x34>)
 8000d5e:	e003      	b.n	8000d68 <MCAL_RCC_Get_System_CLK_Frequency+0x28>
			break ;
		case 1:
			//todo need to calculate it HSE user should specify
			return HSE_Clock ;
 8000d60:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <MCAL_RCC_Get_System_CLK_Frequency+0x38>)
 8000d62:	e001      	b.n	8000d68 <MCAL_RCC_Get_System_CLK_Frequency+0x28>
			break ;
		case 2:
			//todo need to calculate , PLLCLK , PLLMUL , PLL source MUX
			return 16000000 ;
 8000d64:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <MCAL_RCC_Get_System_CLK_Frequency+0x38>)
 8000d66:	e7ff      	b.n	8000d68 <MCAL_RCC_Get_System_CLK_Frequency+0x28>
			break ;
	}

}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr
 8000d70:	40021000 	.word	0x40021000
 8000d74:	007a1200 	.word	0x007a1200
 8000d78:	00f42400 	.word	0x00f42400

08000d7c <MCAL_RCC_Get_HCLK_Frequency>:
 *
 *
 */

uint32_t MCAL_RCC_Get_HCLK_Frequency(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
	// Bits 7:4 HPRE: AHB prescaler
	return (MCAL_RCC_Get_System_CLK_Frequency() >> AHB_prescaler_Table[ ( ( RCC->CFGR >> 4 )& 0xf )] ) ; // The First Shift is Multiplication.
 8000d80:	f7ff ffde 	bl	8000d40 <MCAL_RCC_Get_System_CLK_Frequency>
 8000d84:	4601      	mov	r1, r0
 8000d86:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <MCAL_RCC_Get_HCLK_Frequency+0x20>)
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	091b      	lsrs	r3, r3, #4
 8000d8c:	f003 030f 	and.w	r3, r3, #15
 8000d90:	4a03      	ldr	r2, [pc, #12]	; (8000da0 <MCAL_RCC_Get_HCLK_Frequency+0x24>)
 8000d92:	5cd3      	ldrb	r3, [r2, r3]
 8000d94:	fa21 f303 	lsr.w	r3, r1, r3

}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	08001034 	.word	0x08001034

08000da4 <MCAL_RCC_Get_PCLK1_Frequency>:
 *
 *
 */

uint32_t MCAL_RCC_Get_PCLK1_Frequency(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
	// Bits 10:8 PPRE1: APB low-speed prescaler (APB1)
	return (MCAL_RCC_Get_HCLK_Frequency() >> APB_prescaler_Table[ ( ( RCC->CFGR >> 8 )& 0b111 )] ) ; // The First Shift is Multiplication.
 8000da8:	f7ff ffe8 	bl	8000d7c <MCAL_RCC_Get_HCLK_Frequency>
 8000dac:	4601      	mov	r1, r0
 8000dae:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <MCAL_RCC_Get_PCLK1_Frequency+0x20>)
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	0a1b      	lsrs	r3, r3, #8
 8000db4:	f003 0307 	and.w	r3, r3, #7
 8000db8:	4a03      	ldr	r2, [pc, #12]	; (8000dc8 <MCAL_RCC_Get_PCLK1_Frequency+0x24>)
 8000dba:	5cd3      	ldrb	r3, [r2, r3]
 8000dbc:	fa21 f303 	lsr.w	r3, r1, r3


}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	0800102c 	.word	0x0800102c

08000dcc <SPI1_IRQHandler>:
}


//========================================== IRQ ==========================================

void SPI1_IRQHandler(void){
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0

	struct S_IRQ_SRC irq_src ;

	irq_src.TXE =  ( ((SPI1->SPI_SR) & (1<<1)) >> 1) ;
 8000dd2:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <SPI1_IRQHandler+0x54>)
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	085b      	lsrs	r3, r3, #1
 8000dd8:	f003 0301 	and.w	r3, r3, #1
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	793b      	ldrb	r3, [r7, #4]
 8000de0:	f362 0300 	bfi	r3, r2, #0, #1
 8000de4:	713b      	strb	r3, [r7, #4]
	irq_src.RXEN = ( ((SPI1->SPI_SR) & (1<<0)) >> 0) ;
 8000de6:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <SPI1_IRQHandler+0x54>)
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	793b      	ldrb	r3, [r7, #4]
 8000df2:	f362 0341 	bfi	r3, r2, #1, #1
 8000df6:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( ((SPI1->SPI_SR) & (1<<4)) >> 4) ;
 8000df8:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <SPI1_IRQHandler+0x54>)
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	091b      	lsrs	r3, r3, #4
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	793b      	ldrb	r3, [r7, #4]
 8000e06:	f362 0382 	bfi	r3, r2, #2, #1
 8000e0a:	713b      	strb	r3, [r7, #4]

	Global_SPI_Congig[SPI1_INDEX]->P_IRQ_CallBack(irq_src) ;
 8000e0c:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <SPI1_IRQHandler+0x58>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	695b      	ldr	r3, [r3, #20]
 8000e12:	7938      	ldrb	r0, [r7, #4]
 8000e14:	4798      	blx	r3
}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40013000 	.word	0x40013000
 8000e24:	20000064 	.word	0x20000064

08000e28 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0

	struct S_IRQ_SRC irq_src ;

	irq_src.TXE =  ( ((SPI2->SPI_SR) & (1<<1)) >> 1) ;
 8000e2e:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <SPI2_IRQHandler+0x54>)
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	085b      	lsrs	r3, r3, #1
 8000e34:	f003 0301 	and.w	r3, r3, #1
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	793b      	ldrb	r3, [r7, #4]
 8000e3c:	f362 0300 	bfi	r3, r2, #0, #1
 8000e40:	713b      	strb	r3, [r7, #4]
	irq_src.RXEN = ( ((SPI2->SPI_SR) & (1<<0)) >> 0) ;
 8000e42:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <SPI2_IRQHandler+0x54>)
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	b2da      	uxtb	r2, r3
 8000e4c:	793b      	ldrb	r3, [r7, #4]
 8000e4e:	f362 0341 	bfi	r3, r2, #1, #1
 8000e52:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( ((SPI2->SPI_SR) & (1<<4)) >> 4) ;
 8000e54:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <SPI2_IRQHandler+0x54>)
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	091b      	lsrs	r3, r3, #4
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	793b      	ldrb	r3, [r7, #4]
 8000e62:	f362 0382 	bfi	r3, r2, #2, #1
 8000e66:	713b      	strb	r3, [r7, #4]

	Global_SPI_Congig[SPI2_INDEX]->P_IRQ_CallBack(irq_src) ;
 8000e68:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <SPI2_IRQHandler+0x58>)
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	695b      	ldr	r3, [r3, #20]
 8000e6e:	7938      	ldrb	r0, [r7, #4]
 8000e70:	4798      	blx	r3

}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40003800 	.word	0x40003800
 8000e80:	20000064 	.word	0x20000064

08000e84 <USART1_IRQHandler>:



// ISR
void USART1_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack() ;
 8000e88:	4b02      	ldr	r3, [pc, #8]	; (8000e94 <USART1_IRQHandler+0x10>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	691b      	ldr	r3, [r3, #16]
 8000e8e:	4798      	blx	r3

}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	2000006c 	.word	0x2000006c

08000e98 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack() ;
 8000e9c:	4b02      	ldr	r3, [pc, #8]	; (8000ea8 <USART2_IRQHandler+0x10>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	691b      	ldr	r3, [r3, #16]
 8000ea2:	4798      	blx	r3


}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	2000006c 	.word	0x2000006c

08000eac <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack() ;
 8000eb0:	4b02      	ldr	r3, [pc, #8]	; (8000ebc <USART3_IRQHandler+0x10>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	691b      	ldr	r3, [r3, #16]
 8000eb6:	4798      	blx	r3


}
 8000eb8:	bf00      	nop
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	2000006c 	.word	0x2000006c

08000ec0 <Clock_init>:
//#define MCU_Act_As_Slave
//
//unsigned char ch ;

void Clock_init()
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
	// Enable Clock
	RCC_GPIOA_CLK_EN() ;
 8000ec4:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <Clock_init+0x30>)
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	4a09      	ldr	r2, [pc, #36]	; (8000ef0 <Clock_init+0x30>)
 8000eca:	f043 0304 	orr.w	r3, r3, #4
 8000ece:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN() ;
 8000ed0:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <Clock_init+0x30>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	4a06      	ldr	r2, [pc, #24]	; (8000ef0 <Clock_init+0x30>)
 8000ed6:	f043 0308 	orr.w	r3, r3, #8
 8000eda:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN() ;
 8000edc:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <Clock_init+0x30>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	4a03      	ldr	r2, [pc, #12]	; (8000ef0 <Clock_init+0x30>)
 8000ee2:	f043 0301 	orr.w	r3, r3, #1
 8000ee6:	6193      	str	r3, [r2, #24]


}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr
 8000ef0:	40021000 	.word	0x40021000

08000ef4 <main>:
//
//
//}

int main(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
//	UART_Config uartCFG ;
//	SPI_Congig spi1CFG ;
//	GPIO_PinConfig_t gpioCFG ;

	Clock_init() ;
 8000efa:	f7ff ffe1 	bl	8000ec0 <Clock_init>


	// ===================	I2C1 EEPROM	 ===================
	// ===================	Test Case1	 ===================

	unsigned char CH1[] = {0x1 , 0x2 ,0x3 ,0x4 ,0x5 ,0x6 ,0x7 } ;
 8000efe:	4a1b      	ldr	r2, [pc, #108]	; (8000f6c <main+0x78>)
 8000f00:	f107 0308 	add.w	r3, r7, #8
 8000f04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f08:	6018      	str	r0, [r3, #0]
 8000f0a:	3304      	adds	r3, #4
 8000f0c:	8019      	strh	r1, [r3, #0]
 8000f0e:	3302      	adds	r3, #2
 8000f10:	0c0a      	lsrs	r2, r1, #16
 8000f12:	701a      	strb	r2, [r3, #0]
	unsigned char CH2[7] = {0} ;
 8000f14:	463b      	mov	r3, r7
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	f8c3 2003 	str.w	r2, [r3, #3]

	EEPROM_Init();
 8000f1e:	f7ff f927 	bl	8000170 <EEPROM_Init>
	EEPROM_Write_NBytes(0xAF, CH1, 7) ;
 8000f22:	f107 0308 	add.w	r3, r7, #8
 8000f26:	2207      	movs	r2, #7
 8000f28:	4619      	mov	r1, r3
 8000f2a:	20af      	movs	r0, #175	; 0xaf
 8000f2c:	f7ff f940 	bl	80001b0 <EEPROM_Write_NBytes>
	EEPROM_Read_Byte(0xAF, CH2, 7) ;
 8000f30:	463b      	mov	r3, r7
 8000f32:	2207      	movs	r2, #7
 8000f34:	4619      	mov	r1, r3
 8000f36:	20af      	movs	r0, #175	; 0xaf
 8000f38:	f7ff f98c 	bl	8000254 <EEPROM_Read_Byte>

	// ===================	Test Case2	 ===================
	CH1[0] = 0xA ;
 8000f3c:	230a      	movs	r3, #10
 8000f3e:	723b      	strb	r3, [r7, #8]
	CH1[1] = 0xB ;
 8000f40:	230b      	movs	r3, #11
 8000f42:	727b      	strb	r3, [r7, #9]
	CH1[2] = 0xC ;
 8000f44:	230c      	movs	r3, #12
 8000f46:	72bb      	strb	r3, [r7, #10]
	CH1[3] = 0xD ;
 8000f48:	230d      	movs	r3, #13
 8000f4a:	72fb      	strb	r3, [r7, #11]

	EEPROM_Write_NBytes(0xFFF, CH1, 4) ;
 8000f4c:	f107 0308 	add.w	r3, r7, #8
 8000f50:	2204      	movs	r2, #4
 8000f52:	4619      	mov	r1, r3
 8000f54:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000f58:	f7ff f92a 	bl	80001b0 <EEPROM_Write_NBytes>
	EEPROM_Read_Byte(0xFFF, CH2, 4) ;
 8000f5c:	463b      	mov	r3, r7
 8000f5e:	2204      	movs	r2, #4
 8000f60:	4619      	mov	r1, r3
 8000f62:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000f66:	f7ff f975 	bl	8000254 <EEPROM_Read_Byte>


// LOOP FOREEVER
	while(1)
 8000f6a:	e7fe      	b.n	8000f6a <main+0x76>
 8000f6c:	08001024 	.word	0x08001024

08000f70 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f70:	480d      	ldr	r0, [pc, #52]	; (8000fa8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f72:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f74:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f78:	480c      	ldr	r0, [pc, #48]	; (8000fac <LoopForever+0x6>)
  ldr r1, =_edata
 8000f7a:	490d      	ldr	r1, [pc, #52]	; (8000fb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f7c:	4a0d      	ldr	r2, [pc, #52]	; (8000fb4 <LoopForever+0xe>)
  movs r3, #0
 8000f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f80:	e002      	b.n	8000f88 <LoopCopyDataInit>

08000f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f86:	3304      	adds	r3, #4

08000f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f8c:	d3f9      	bcc.n	8000f82 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f90:	4c0a      	ldr	r4, [pc, #40]	; (8000fbc <LoopForever+0x16>)
  movs r3, #0
 8000f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f94:	e001      	b.n	8000f9a <LoopFillZerobss>

08000f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f98:	3204      	adds	r2, #4

08000f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f9c:	d3fb      	bcc.n	8000f96 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f9e:	f000 f811 	bl	8000fc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fa2:	f7ff ffa7 	bl	8000ef4 <main>

08000fa6 <LoopForever>:

LoopForever:
    b LoopForever
 8000fa6:	e7fe      	b.n	8000fa6 <LoopForever>
  ldr   r0, =_estack
 8000fa8:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000fac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000fb4:	0800104c 	.word	0x0800104c
  ldr r2, =_sbss
 8000fb8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000fbc:	200000ac 	.word	0x200000ac

08000fc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fc0:	e7fe      	b.n	8000fc0 <ADC1_2_IRQHandler>
	...

08000fc4 <__libc_init_array>:
 8000fc4:	b570      	push	{r4, r5, r6, lr}
 8000fc6:	2500      	movs	r5, #0
 8000fc8:	4e0c      	ldr	r6, [pc, #48]	; (8000ffc <__libc_init_array+0x38>)
 8000fca:	4c0d      	ldr	r4, [pc, #52]	; (8001000 <__libc_init_array+0x3c>)
 8000fcc:	1ba4      	subs	r4, r4, r6
 8000fce:	10a4      	asrs	r4, r4, #2
 8000fd0:	42a5      	cmp	r5, r4
 8000fd2:	d109      	bne.n	8000fe8 <__libc_init_array+0x24>
 8000fd4:	f000 f81a 	bl	800100c <_init>
 8000fd8:	2500      	movs	r5, #0
 8000fda:	4e0a      	ldr	r6, [pc, #40]	; (8001004 <__libc_init_array+0x40>)
 8000fdc:	4c0a      	ldr	r4, [pc, #40]	; (8001008 <__libc_init_array+0x44>)
 8000fde:	1ba4      	subs	r4, r4, r6
 8000fe0:	10a4      	asrs	r4, r4, #2
 8000fe2:	42a5      	cmp	r5, r4
 8000fe4:	d105      	bne.n	8000ff2 <__libc_init_array+0x2e>
 8000fe6:	bd70      	pop	{r4, r5, r6, pc}
 8000fe8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000fec:	4798      	blx	r3
 8000fee:	3501      	adds	r5, #1
 8000ff0:	e7ee      	b.n	8000fd0 <__libc_init_array+0xc>
 8000ff2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ff6:	4798      	blx	r3
 8000ff8:	3501      	adds	r5, #1
 8000ffa:	e7f2      	b.n	8000fe2 <__libc_init_array+0x1e>
 8000ffc:	08001044 	.word	0x08001044
 8001000:	08001044 	.word	0x08001044
 8001004:	08001044 	.word	0x08001044
 8001008:	08001048 	.word	0x08001048

0800100c <_init>:
 800100c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800100e:	bf00      	nop
 8001010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001012:	bc08      	pop	{r3}
 8001014:	469e      	mov	lr, r3
 8001016:	4770      	bx	lr

08001018 <_fini>:
 8001018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800101a:	bf00      	nop
 800101c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800101e:	bc08      	pop	{r3}
 8001020:	469e      	mov	lr, r3
 8001022:	4770      	bx	lr
