
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000dd0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000f00  08000f00  00010f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f18  08000f18  00010f20  2**0
                  CONTENTS
  4 .ARM          00000000  08000f18  08000f18  00010f20  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f18  08000f20  00010f20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f18  08000f18  00010f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f1c  08000f1c  00010f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010f20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000000  08000f20  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  08000f20  00020068  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010f20  2**0
                  CONTENTS, READONLY
 12 .debug_info   000051dd  00000000  00000000  00010f49  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000cd5  00000000  00000000  00016126  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000d78  00000000  00000000  00016dfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000230  00000000  00000000  00017b78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001c8  00000000  00000000  00017da8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000110b  00000000  00000000  00017f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00003003  00000000  00000000  0001907b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000aaeb  00000000  00000000  0001c07e  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00026b69  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000006fc  00000000  00000000  00026be4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000ee8 	.word	0x08000ee8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000ee8 	.word	0x08000ee8

08000170 <EXTI0_IRQHandler>:
 * ===============================================
				"ISR Function"
 * ===============================================
 */

void EXTI0_IRQHandler (void){
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	//Disable Pending register
	EXTI->PR |= 1<<0 ;
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	695b      	ldr	r3, [r3, #20]
 8000178:	4a04      	ldr	r2, [pc, #16]	; (800018c <EXTI0_IRQHandler+0x1c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6153      	str	r3, [r2, #20]
	// CALLBACK IRQ
	GP_IRQ_CallBack[0] ();
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <EXTI0_IRQHandler+0x20>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4798      	blx	r3

	}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010400 	.word	0x40010400
 8000190:	20000028 	.word	0x20000028

08000194 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler (void){
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	//Disable Pending register
		EXTI->PR |= (1<<1) ;
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	695b      	ldr	r3, [r3, #20]
 800019c:	4a04      	ldr	r2, [pc, #16]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019e:	f043 0302 	orr.w	r3, r3, #2
 80001a2:	6153      	str	r3, [r2, #20]
		// CALLBACK IRQ
		GP_IRQ_CallBack[1]();
 80001a4:	4b03      	ldr	r3, [pc, #12]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4798      	blx	r3

	}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	40010400 	.word	0x40010400
 80001b4:	20000028 	.word	0x20000028

080001b8 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler (void){
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	//Disable Pending register
		EXTI->PR |= (1<<2) ;
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	695b      	ldr	r3, [r3, #20]
 80001c0:	4a04      	ldr	r2, [pc, #16]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001c2:	f043 0304 	orr.w	r3, r3, #4
 80001c6:	6153      	str	r3, [r2, #20]
		// CALLBACK IRQ
		GP_IRQ_CallBack[2]();
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	4798      	blx	r3

	}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010400 	.word	0x40010400
 80001d8:	20000028 	.word	0x20000028

080001dc <EXTI3_IRQHandler>:
void EXTI3_IRQHandler (void){
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	//Disable Pending register
		EXTI->PR |= (1<<3) ;
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	695b      	ldr	r3, [r3, #20]
 80001e4:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e6:	f043 0308 	orr.w	r3, r3, #8
 80001ea:	6153      	str	r3, [r2, #20]
		// CALLBACK IRQ
		GP_IRQ_CallBack[3]();
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001ee:	68db      	ldr	r3, [r3, #12]
 80001f0:	4798      	blx	r3

	}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010400 	.word	0x40010400
 80001fc:	20000028 	.word	0x20000028

08000200 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler (void){
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	//Disable Pending register
		EXTI->PR |= (1<<4) ;
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI4_IRQHandler+0x1c>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <EXTI4_IRQHandler+0x1c>)
 800020a:	f043 0310 	orr.w	r3, r3, #16
 800020e:	6153      	str	r3, [r2, #20]
		// CALLBACK IRQ
		GP_IRQ_CallBack[4]();
 8000210:	4b03      	ldr	r3, [pc, #12]	; (8000220 <EXTI4_IRQHandler+0x20>)
 8000212:	691b      	ldr	r3, [r3, #16]
 8000214:	4798      	blx	r3

	}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40010400 	.word	0x40010400
 8000220:	20000028 	.word	0x20000028

08000224 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler (void){
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5){ EXTI->PR |= (1<<5) ; GP_IRQ_CallBack[5](); }
 8000228:	4b26      	ldr	r3, [pc, #152]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	f003 0320 	and.w	r3, r3, #32
 8000230:	2b00      	cmp	r3, #0
 8000232:	d008      	beq.n	8000246 <EXTI9_5_IRQHandler+0x22>
 8000234:	4b23      	ldr	r3, [pc, #140]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a22      	ldr	r2, [pc, #136]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6153      	str	r3, [r2, #20]
 8000240:	4b21      	ldr	r3, [pc, #132]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4798      	blx	r3
	if(EXTI->PR & 1<<6){ EXTI->PR |= (1<<6) ; GP_IRQ_CallBack[6](); }
 8000246:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800024e:	2b00      	cmp	r3, #0
 8000250:	d008      	beq.n	8000264 <EXTI9_5_IRQHandler+0x40>
 8000252:	4b1c      	ldr	r3, [pc, #112]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	4a1b      	ldr	r2, [pc, #108]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800025c:	6153      	str	r3, [r2, #20]
 800025e:	4b1a      	ldr	r3, [pc, #104]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	4798      	blx	r3
	if(EXTI->PR & 1<<7){ EXTI->PR |= (1<<7) ; GP_IRQ_CallBack[7](); }
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800026c:	2b00      	cmp	r3, #0
 800026e:	d008      	beq.n	8000282 <EXTI9_5_IRQHandler+0x5e>
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027a:	6153      	str	r3, [r2, #20]
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800027e:	69db      	ldr	r3, [r3, #28]
 8000280:	4798      	blx	r3
	if(EXTI->PR & 1<<8){ EXTI->PR |= (1<<8) ; GP_IRQ_CallBack[8](); }
 8000282:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800028a:	2b00      	cmp	r3, #0
 800028c:	d008      	beq.n	80002a0 <EXTI9_5_IRQHandler+0x7c>
 800028e:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a0c      	ldr	r2, [pc, #48]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000298:	6153      	str	r3, [r2, #20]
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800029c:	6a1b      	ldr	r3, [r3, #32]
 800029e:	4798      	blx	r3
	if(EXTI->PR & 1<<9){ EXTI->PR |= (1<<9) ; GP_IRQ_CallBack[9](); }
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d008      	beq.n	80002be <EXTI9_5_IRQHandler+0x9a>
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002b6:	6153      	str	r3, [r2, #20]
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 80002ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002bc:	4798      	blx	r3

	}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010400 	.word	0x40010400
 80002c8:	20000028 	.word	0x20000028

080002cc <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler (void){
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10){ EXTI->PR |= (1<<10) ; GP_IRQ_CallBack[10](); }
 80002d0:	4b2d      	ldr	r3, [pc, #180]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d008      	beq.n	80002ee <EXTI15_10_IRQHandler+0x22>
 80002dc:	4b2a      	ldr	r3, [pc, #168]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a29      	ldr	r2, [pc, #164]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002e6:	6153      	str	r3, [r2, #20]
 80002e8:	4b28      	ldr	r3, [pc, #160]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 80002ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002ec:	4798      	blx	r3
	if(EXTI->PR & 1<<11){ EXTI->PR |= (1<<11) ; GP_IRQ_CallBack[11](); }
 80002ee:	4b26      	ldr	r3, [pc, #152]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d008      	beq.n	800030c <EXTI15_10_IRQHandler+0x40>
 80002fa:	4b23      	ldr	r3, [pc, #140]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a22      	ldr	r2, [pc, #136]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000300:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000304:	6153      	str	r3, [r2, #20]
 8000306:	4b21      	ldr	r3, [pc, #132]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800030a:	4798      	blx	r3
	if(EXTI->PR & 1<<12){ EXTI->PR |= (1<<12) ; GP_IRQ_CallBack[12](); }
 800030c:	4b1e      	ldr	r3, [pc, #120]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000314:	2b00      	cmp	r3, #0
 8000316:	d008      	beq.n	800032a <EXTI15_10_IRQHandler+0x5e>
 8000318:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a1a      	ldr	r2, [pc, #104]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000322:	6153      	str	r3, [r2, #20]
 8000324:	4b19      	ldr	r3, [pc, #100]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000328:	4798      	blx	r3
	if(EXTI->PR & 1<<13){ EXTI->PR |= (1<<13) ; GP_IRQ_CallBack[13](); }
 800032a:	4b17      	ldr	r3, [pc, #92]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000332:	2b00      	cmp	r3, #0
 8000334:	d008      	beq.n	8000348 <EXTI15_10_IRQHandler+0x7c>
 8000336:	4b14      	ldr	r3, [pc, #80]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a13      	ldr	r2, [pc, #76]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800033c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000346:	4798      	blx	r3
	if(EXTI->PR & 1<<14){ EXTI->PR |= (1<<14) ; GP_IRQ_CallBack[14](); }
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000350:	2b00      	cmp	r3, #0
 8000352:	d008      	beq.n	8000366 <EXTI15_10_IRQHandler+0x9a>
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800035a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800035e:	6153      	str	r3, [r2, #20]
 8000360:	4b0a      	ldr	r3, [pc, #40]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000364:	4798      	blx	r3
	if(EXTI->PR & 1<<15){ EXTI->PR |= (1<<15) ; GP_IRQ_CallBack[15](); }
 8000366:	4b08      	ldr	r3, [pc, #32]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800036e:	2b00      	cmp	r3, #0
 8000370:	d008      	beq.n	8000384 <EXTI15_10_IRQHandler+0xb8>
 8000372:	4b05      	ldr	r3, [pc, #20]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a04      	ldr	r2, [pc, #16]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800037c:	6153      	str	r3, [r2, #20]
 800037e:	4b03      	ldr	r3, [pc, #12]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000382:	4798      	blx	r3

	}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40010400 	.word	0x40010400
 800038c:	20000028 	.word	0x20000028

08000390 <Get_CRLH_Position>:
/*
 * ===============================================
 * APIs Supported by "MCAL GPIO DRIVER"
 * ===============================================
 */
uint8_t Get_CRLH_Position (uint16_t PinNumber) {
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 800039a:	88fb      	ldrh	r3, [r7, #6]
 800039c:	2b80      	cmp	r3, #128	; 0x80
 800039e:	d042      	beq.n	8000426 <Get_CRLH_Position+0x96>
 80003a0:	2b80      	cmp	r3, #128	; 0x80
 80003a2:	dc11      	bgt.n	80003c8 <Get_CRLH_Position+0x38>
 80003a4:	2b08      	cmp	r3, #8
 80003a6:	d036      	beq.n	8000416 <Get_CRLH_Position+0x86>
 80003a8:	2b08      	cmp	r3, #8
 80003aa:	dc06      	bgt.n	80003ba <Get_CRLH_Position+0x2a>
 80003ac:	2b02      	cmp	r3, #2
 80003ae:	d02e      	beq.n	800040e <Get_CRLH_Position+0x7e>
 80003b0:	2b04      	cmp	r3, #4
 80003b2:	d02e      	beq.n	8000412 <Get_CRLH_Position+0x82>
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d028      	beq.n	800040a <Get_CRLH_Position+0x7a>
 80003b8:	e047      	b.n	800044a <Get_CRLH_Position+0xba>
 80003ba:	2b20      	cmp	r3, #32
 80003bc:	d02f      	beq.n	800041e <Get_CRLH_Position+0x8e>
 80003be:	2b40      	cmp	r3, #64	; 0x40
 80003c0:	d02f      	beq.n	8000422 <Get_CRLH_Position+0x92>
 80003c2:	2b10      	cmp	r3, #16
 80003c4:	d029      	beq.n	800041a <Get_CRLH_Position+0x8a>
 80003c6:	e040      	b.n	800044a <Get_CRLH_Position+0xba>
 80003c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003cc:	d033      	beq.n	8000436 <Get_CRLH_Position+0xa6>
 80003ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003d2:	dc09      	bgt.n	80003e8 <Get_CRLH_Position+0x58>
 80003d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80003d8:	d029      	beq.n	800042e <Get_CRLH_Position+0x9e>
 80003da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003de:	d028      	beq.n	8000432 <Get_CRLH_Position+0xa2>
 80003e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80003e4:	d021      	beq.n	800042a <Get_CRLH_Position+0x9a>
 80003e6:	e030      	b.n	800044a <Get_CRLH_Position+0xba>
 80003e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003ec:	d027      	beq.n	800043e <Get_CRLH_Position+0xae>
 80003ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003f2:	dc03      	bgt.n	80003fc <Get_CRLH_Position+0x6c>
 80003f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80003f8:	d01f      	beq.n	800043a <Get_CRLH_Position+0xaa>
 80003fa:	e026      	b.n	800044a <Get_CRLH_Position+0xba>
 80003fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000400:	d01f      	beq.n	8000442 <Get_CRLH_Position+0xb2>
 8000402:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000406:	d01e      	beq.n	8000446 <Get_CRLH_Position+0xb6>
 8000408:	e01f      	b.n	800044a <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0 :
		return 0 ;
 800040a:	2300      	movs	r3, #0
 800040c:	e01e      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_1 :
		return 4 ;
 800040e:	2304      	movs	r3, #4
 8000410:	e01c      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_2 :
		return 8 ;
 8000412:	2308      	movs	r3, #8
 8000414:	e01a      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_3 :
		return 12 ;
 8000416:	230c      	movs	r3, #12
 8000418:	e018      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_4 :
		return 16 ;
 800041a:	2310      	movs	r3, #16
 800041c:	e016      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_5 :
		return 20 ;
 800041e:	2314      	movs	r3, #20
 8000420:	e014      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_6 :
		return 24 ;
 8000422:	2318      	movs	r3, #24
 8000424:	e012      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_7 :
		return 28 ;
 8000426:	231c      	movs	r3, #28
 8000428:	e010      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_8 :
		return 0 ;
 800042a:	2300      	movs	r3, #0
 800042c:	e00e      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_9 :
		return 4 ;
 800042e:	2304      	movs	r3, #4
 8000430:	e00c      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_10 :
		return 8 ;
 8000432:	2308      	movs	r3, #8
 8000434:	e00a      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_11 :
		return 12 ;
 8000436:	230c      	movs	r3, #12
 8000438:	e008      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_12 :
		return 16 ;
 800043a:	2310      	movs	r3, #16
 800043c:	e006      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_13:
		return 20 ;
 800043e:	2314      	movs	r3, #20
 8000440:	e004      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_14 :
		return 24 ;
 8000442:	2318      	movs	r3, #24
 8000444:	e002      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_15 :
		return 28 ;
 8000446:	231c      	movs	r3, #28
 8000448:	e000      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;

	}
	return 0 ;
 800044a:	2300      	movs	r3, #0


}
 800044c:	4618      	mov	r0, r3
 800044e:	370c      	adds	r7, #12
 8000450:	46bd      	mov	sp, r7
 8000452:	bc80      	pop	{r7}
 8000454:	4770      	bx	lr

08000456 <MCAL_GPIO_Init>:
 * Note					- In STM32F103C6 A , B fully included in LQFP48 Package ,
 * 									     C , D Partial included in LQFP48 Package ,
 * 						      			 E NOT included in LQFP48 Package.
 */

void MCAL_GPIO_Init(GPIO_Typedef *GPIOx ,GPIO_PinConfig_t* PinConfig ) {
 8000456:	b590      	push	{r4, r7, lr}
 8000458:	b085      	sub	sp, #20
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
 800045e:	6039      	str	r1, [r7, #0]
	// Port Configuration register low (GPIOx_CRL) Configure PINs from 0 >>> 7
	// Port Configuration register High (GPIOx_CRH) Configure PINs from 8 >>> 15
	volatile uint32_t* configregister = NULL ;
 8000460:	2300      	movs	r3, #0
 8000462:	60fb      	str	r3, [r7, #12]
	uint8_t PIN_Config = 0 ;
 8000464:	2300      	movs	r3, #0
 8000466:	72fb      	strb	r3, [r7, #11]
	configregister = (PinConfig ->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH ; // TO check pin is low(0>>>7) or high(8>>>15)
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	881b      	ldrh	r3, [r3, #0]
 800046c:	2bff      	cmp	r3, #255	; 0xff
 800046e:	d801      	bhi.n	8000474 <MCAL_GPIO_Init+0x1e>
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	e001      	b.n	8000478 <MCAL_GPIO_Init+0x22>
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	3304      	adds	r3, #4
 8000478:	60fb      	str	r3, [r7, #12]

	//clear CNF , MODE
	(*configregister) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber)) ;
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	881b      	ldrh	r3, [r3, #0]
 800047e:	4618      	mov	r0, r3
 8000480:	f7ff ff86 	bl	8000390 <Get_CRLH_Position>
 8000484:	4603      	mov	r3, r0
 8000486:	461a      	mov	r2, r3
 8000488:	230f      	movs	r3, #15
 800048a:	4093      	lsls	r3, r2
 800048c:	43da      	mvns	r2, r3
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	401a      	ands	r2, r3
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	601a      	str	r2, [r3, #0]

	// if pin is output
	if((PinConfig->GPIO_MODE == GPIO_MODE_Output_push_pull ) || (PinConfig->GPIO_MODE == GPIO_MODE_Output_Open_drain ) || (PinConfig->GPIO_MODE == GPIO_MODE_Output_AF_Push_pull ) || (PinConfig->GPIO_MODE == GPIO_MODE_Output_AF_Open_drain  ))
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	789b      	ldrb	r3, [r3, #2]
 800049c:	2b04      	cmp	r3, #4
 800049e:	d00b      	beq.n	80004b8 <MCAL_GPIO_Init+0x62>
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	789b      	ldrb	r3, [r3, #2]
 80004a4:	2b05      	cmp	r3, #5
 80004a6:	d007      	beq.n	80004b8 <MCAL_GPIO_Init+0x62>
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	789b      	ldrb	r3, [r3, #2]
 80004ac:	2b06      	cmp	r3, #6
 80004ae:	d003      	beq.n	80004b8 <MCAL_GPIO_Init+0x62>
 80004b0:	683b      	ldr	r3, [r7, #0]
 80004b2:	789b      	ldrb	r3, [r3, #2]
 80004b4:	2b07      	cmp	r3, #7
 80004b6:	d11c      	bne.n	80004f2 <MCAL_GPIO_Init+0x9c>
	{
		//Set CNF , MODE
		PIN_Config = ((((PinConfig->GPIO_MODE - 4) << 2 ) | (PinConfig -> GPIO_Output_Speed)) & 0x0f ) ;
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	789b      	ldrb	r3, [r3, #2]
 80004bc:	3b04      	subs	r3, #4
 80004be:	009b      	lsls	r3, r3, #2
 80004c0:	b25a      	sxtb	r2, r3
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	78db      	ldrb	r3, [r3, #3]
 80004c6:	b25b      	sxtb	r3, r3
 80004c8:	4313      	orrs	r3, r2
 80004ca:	b25b      	sxtb	r3, r3
 80004cc:	b2db      	uxtb	r3, r3
 80004ce:	f003 030f 	and.w	r3, r3, #15
 80004d2:	72fb      	strb	r3, [r7, #11]
		(*configregister) |= ((PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber)) ;
 80004d4:	7afc      	ldrb	r4, [r7, #11]
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	881b      	ldrh	r3, [r3, #0]
 80004da:	4618      	mov	r0, r3
 80004dc:	f7ff ff58 	bl	8000390 <Get_CRLH_Position>
 80004e0:	4603      	mov	r3, r0
 80004e2:	fa04 f203 	lsl.w	r2, r4, r3
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	431a      	orrs	r2, r3
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	e057      	b.n	80005a2 <MCAL_GPIO_Init+0x14c>

	}
	// if pin is output
	else { // MODE  = 00 INPUT RESET STATE
		if((PinConfig->GPIO_MODE == GPIO_MODE_Analog ) ||(PinConfig->GPIO_MODE == GPIO_MODE_Input_Floating ) ){
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	789b      	ldrb	r3, [r3, #2]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d003      	beq.n	8000502 <MCAL_GPIO_Init+0xac>
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	789b      	ldrb	r3, [r3, #2]
 80004fe:	2b01      	cmp	r3, #1
 8000500:	d115      	bne.n	800052e <MCAL_GPIO_Init+0xd8>
			//Set CNF , MODE
			PIN_Config = ((((PinConfig->GPIO_MODE ) << 2 ) | 0x0 ) & 0x0f ) ;
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	789b      	ldrb	r3, [r3, #2]
 8000506:	009b      	lsls	r3, r3, #2
 8000508:	b2db      	uxtb	r3, r3
 800050a:	f003 030f 	and.w	r3, r3, #15
 800050e:	72fb      	strb	r3, [r7, #11]
			(*configregister) |= ((PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber)) ;
 8000510:	7afc      	ldrb	r4, [r7, #11]
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	881b      	ldrh	r3, [r3, #0]
 8000516:	4618      	mov	r0, r3
 8000518:	f7ff ff3a 	bl	8000390 <Get_CRLH_Position>
 800051c:	4603      	mov	r3, r0
 800051e:	fa04 f203 	lsl.w	r2, r4, r3
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	431a      	orrs	r2, r3
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	e039      	b.n	80005a2 <MCAL_GPIO_Init+0x14c>

		}else if(PinConfig->GPIO_MODE == GPIO_MODE_Input_AF ){
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	789b      	ldrb	r3, [r3, #2]
 8000532:	2b08      	cmp	r3, #8
 8000534:	d110      	bne.n	8000558 <MCAL_GPIO_Init+0x102>
			//Set CNF , MODE
			PIN_Config = (((GPIO_MODE_Input_AF << 2 ) | 0x0 ) & 0x0f ) ;
 8000536:	2300      	movs	r3, #0
 8000538:	72fb      	strb	r3, [r7, #11]
			(*configregister) |= ((PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber)) ;
 800053a:	7afc      	ldrb	r4, [r7, #11]
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	881b      	ldrh	r3, [r3, #0]
 8000540:	4618      	mov	r0, r3
 8000542:	f7ff ff25 	bl	8000390 <Get_CRLH_Position>
 8000546:	4603      	mov	r3, r0
 8000548:	fa04 f203 	lsl.w	r2, r4, r3
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	431a      	orrs	r2, r3
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	601a      	str	r2, [r3, #0]
			}

		}
	}
	//(*configregister) |= ((PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber)) ;
}
 8000556:	e024      	b.n	80005a2 <MCAL_GPIO_Init+0x14c>
			PIN_Config = (((GPIO_MODE_Input_pull_up << 2 ) | 0x0 ) & 0x0f)  ;
 8000558:	2308      	movs	r3, #8
 800055a:	72fb      	strb	r3, [r7, #11]
			(*configregister) |= ((PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber)) ;
 800055c:	7afc      	ldrb	r4, [r7, #11]
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	881b      	ldrh	r3, [r3, #0]
 8000562:	4618      	mov	r0, r3
 8000564:	f7ff ff14 	bl	8000390 <Get_CRLH_Position>
 8000568:	4603      	mov	r3, r0
 800056a:	fa04 f203 	lsl.w	r2, r4, r3
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	431a      	orrs	r2, r3
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	601a      	str	r2, [r3, #0]
			if(PinConfig->GPIO_MODE == GPIO_MODE_Input_pull_up){
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	789b      	ldrb	r3, [r3, #2]
 800057c:	2b02      	cmp	r3, #2
 800057e:	d107      	bne.n	8000590 <MCAL_GPIO_Init+0x13a>
				GPIOx->ODR |= PinConfig->GPIO_PinNumber ;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	68db      	ldr	r3, [r3, #12]
 8000584:	683a      	ldr	r2, [r7, #0]
 8000586:	8812      	ldrh	r2, [r2, #0]
 8000588:	431a      	orrs	r2, r3
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	60da      	str	r2, [r3, #12]
}
 800058e:	e008      	b.n	80005a2 <MCAL_GPIO_Init+0x14c>
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber) ;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	68db      	ldr	r3, [r3, #12]
 8000594:	683a      	ldr	r2, [r7, #0]
 8000596:	8812      	ldrh	r2, [r2, #0]
 8000598:	43d2      	mvns	r2, r2
 800059a:	401a      	ands	r2, r3
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	60da      	str	r2, [r3, #12]
}
 80005a0:	e7ff      	b.n	80005a2 <MCAL_GPIO_Init+0x14c>
 80005a2:	bf00      	nop
 80005a4:	3714      	adds	r7, #20
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd90      	pop	{r4, r7, pc}
	...

080005ac <MCAL_RCC_Get_System_CLK_Frequency>:
 *
 *
 */

uint32_t MCAL_RCC_Get_System_CLK_Frequency(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
00: HSI oscillator used as system clock
01: HSE oscillator used as system clock
10: PLL used as system clock
11: not applicable
*/
	switch((RCC->CFGR >> 2) & 0b11)
 80005b0:	4b0a      	ldr	r3, [pc, #40]	; (80005dc <MCAL_RCC_Get_System_CLK_Frequency+0x30>)
 80005b2:	685b      	ldr	r3, [r3, #4]
 80005b4:	089b      	lsrs	r3, r3, #2
 80005b6:	f003 0303 	and.w	r3, r3, #3
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d006      	beq.n	80005cc <MCAL_RCC_Get_System_CLK_Frequency+0x20>
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d302      	bcc.n	80005c8 <MCAL_RCC_Get_System_CLK_Frequency+0x1c>
 80005c2:	2b02      	cmp	r3, #2
 80005c4:	d004      	beq.n	80005d0 <MCAL_RCC_Get_System_CLK_Frequency+0x24>
 80005c6:	e005      	b.n	80005d4 <MCAL_RCC_Get_System_CLK_Frequency+0x28>
	{
		case 0:
			return HSI_RC_CLK ;
 80005c8:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <MCAL_RCC_Get_System_CLK_Frequency+0x34>)
 80005ca:	e003      	b.n	80005d4 <MCAL_RCC_Get_System_CLK_Frequency+0x28>
			break ;
		case 1:
			//todo need to calculate it HSE user should specify
			return HSE_Clock ;
 80005cc:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <MCAL_RCC_Get_System_CLK_Frequency+0x38>)
 80005ce:	e001      	b.n	80005d4 <MCAL_RCC_Get_System_CLK_Frequency+0x28>
			break ;
		case 2:
			//todo need to calculate , PLLCLK , PLLMUL , PLL source MUX
			return 16000000 ;
 80005d0:	4b04      	ldr	r3, [pc, #16]	; (80005e4 <MCAL_RCC_Get_System_CLK_Frequency+0x38>)
 80005d2:	e7ff      	b.n	80005d4 <MCAL_RCC_Get_System_CLK_Frequency+0x28>
			break ;
	}

}
 80005d4:	4618      	mov	r0, r3
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bc80      	pop	{r7}
 80005da:	4770      	bx	lr
 80005dc:	40021000 	.word	0x40021000
 80005e0:	007a1200 	.word	0x007a1200
 80005e4:	00f42400 	.word	0x00f42400

080005e8 <MCAL_RCC_Get_HCLK_Frequency>:
 *
 *
 */

uint32_t MCAL_RCC_Get_HCLK_Frequency(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	// Bits 7:4 HPRE: AHB prescaler
	return (MCAL_RCC_Get_System_CLK_Frequency() >> AHB_prescaler_Table[ ( ( RCC->CFGR >> 4 )& 0xf )] ) ; // The First Shift is Multiplication.
 80005ec:	f7ff ffde 	bl	80005ac <MCAL_RCC_Get_System_CLK_Frequency>
 80005f0:	4601      	mov	r1, r0
 80005f2:	4b05      	ldr	r3, [pc, #20]	; (8000608 <MCAL_RCC_Get_HCLK_Frequency+0x20>)
 80005f4:	685b      	ldr	r3, [r3, #4]
 80005f6:	091b      	lsrs	r3, r3, #4
 80005f8:	f003 030f 	and.w	r3, r3, #15
 80005fc:	4a03      	ldr	r2, [pc, #12]	; (800060c <MCAL_RCC_Get_HCLK_Frequency+0x24>)
 80005fe:	5cd3      	ldrb	r3, [r2, r3]
 8000600:	fa21 f303 	lsr.w	r3, r1, r3

}
 8000604:	4618      	mov	r0, r3
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40021000 	.word	0x40021000
 800060c:	08000f08 	.word	0x08000f08

08000610 <MCAL_RCC_Get_PCLK1_Frequency>:
 *
 *
 */

uint32_t MCAL_RCC_Get_PCLK1_Frequency(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	// Bits 10:8 PPRE1: APB low-speed prescaler (APB1)
	return (MCAL_RCC_Get_HCLK_Frequency() >> APB_prescaler_Table[ ( ( RCC->CFGR >> 8 )& 0b111 )] ) ; // The First Shift is Multiplication.
 8000614:	f7ff ffe8 	bl	80005e8 <MCAL_RCC_Get_HCLK_Frequency>
 8000618:	4601      	mov	r1, r0
 800061a:	4b05      	ldr	r3, [pc, #20]	; (8000630 <MCAL_RCC_Get_PCLK1_Frequency+0x20>)
 800061c:	685b      	ldr	r3, [r3, #4]
 800061e:	0a1b      	lsrs	r3, r3, #8
 8000620:	f003 0307 	and.w	r3, r3, #7
 8000624:	4a03      	ldr	r2, [pc, #12]	; (8000634 <MCAL_RCC_Get_PCLK1_Frequency+0x24>)
 8000626:	5cd3      	ldrb	r3, [r2, r3]
 8000628:	fa21 f303 	lsr.w	r3, r1, r3


}
 800062c:	4618      	mov	r0, r3
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40021000 	.word	0x40021000
 8000634:	08000f00 	.word	0x08000f00

08000638 <MCAL_RCC_Get_PCLK2_Frequency>:
 *
 *
 */

uint32_t MCAL_RCC_Get_PCLK2_Frequency(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
	//Bits 13:11 PPRE2: APB high-speed prescaler (APB2)
	return (MCAL_RCC_Get_HCLK_Frequency() >> APB_prescaler_Table[ ( ( RCC->CFGR >> 11 )& 0b111 )] ) ; // The First Shift is Multiplication.
 800063c:	f7ff ffd4 	bl	80005e8 <MCAL_RCC_Get_HCLK_Frequency>
 8000640:	4601      	mov	r1, r0
 8000642:	4b05      	ldr	r3, [pc, #20]	; (8000658 <MCAL_RCC_Get_PCLK2_Frequency+0x20>)
 8000644:	685b      	ldr	r3, [r3, #4]
 8000646:	0adb      	lsrs	r3, r3, #11
 8000648:	f003 0307 	and.w	r3, r3, #7
 800064c:	4a03      	ldr	r2, [pc, #12]	; (800065c <MCAL_RCC_Get_PCLK2_Frequency+0x24>)
 800064e:	5cd3      	ldrb	r3, [r2, r3]
 8000650:	fa21 f303 	lsr.w	r3, r1, r3


}
 8000654:	4618      	mov	r0, r3
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40021000 	.word	0x40021000
 800065c:	08000f00 	.word	0x08000f00

08000660 <MCAL_SPI_Init>:
 * Note					- Support for SPI Full Duplex Master/Slave only & NSS HW/SW
 *						- in case of Master You have to configure Pin and device it.
 */

void MCAL_SPI_Init(SPI_Typedef* SPIx , SPI_Congig* SPI_Congig)
{
 8000660:	b480      	push	{r7}
 8000662:	b085      	sub	sp, #20
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	6039      	str	r1, [r7, #0]
	// Safety for Registers
	uint16_t TempReg_CR1 = 0 ;
 800066a:	2300      	movs	r3, #0
 800066c:	81fb      	strh	r3, [r7, #14]
	uint16_t TempReg_CR2 = 0 ;
 800066e:	2300      	movs	r3, #0
 8000670:	81bb      	strh	r3, [r7, #12]

	if(SPIx == SPI1){
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4a3b      	ldr	r2, [pc, #236]	; (8000764 <MCAL_SPI_Init+0x104>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d109      	bne.n	800068e <MCAL_SPI_Init+0x2e>
		Global_SPI_Congig[SPI1_INDEX] = SPI_Congig ;
 800067a:	4a3b      	ldr	r2, [pc, #236]	; (8000768 <MCAL_SPI_Init+0x108>)
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	6013      	str	r3, [r2, #0]
		RCC_SPI1_CLK_EN() ;
 8000680:	4b3a      	ldr	r3, [pc, #232]	; (800076c <MCAL_SPI_Init+0x10c>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	4a39      	ldr	r2, [pc, #228]	; (800076c <MCAL_SPI_Init+0x10c>)
 8000686:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800068a:	6193      	str	r3, [r2, #24]
 800068c:	e00c      	b.n	80006a8 <MCAL_SPI_Init+0x48>
	}
	else if(SPIx == SPI2){
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4a37      	ldr	r2, [pc, #220]	; (8000770 <MCAL_SPI_Init+0x110>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d108      	bne.n	80006a8 <MCAL_SPI_Init+0x48>
		Global_SPI_Congig[SPI2_INDEX] = SPI_Congig ;
 8000696:	4a34      	ldr	r2, [pc, #208]	; (8000768 <MCAL_SPI_Init+0x108>)
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	6053      	str	r3, [r2, #4]
		RCC_SPI2_CLK_EN() ;
 800069c:	4b33      	ldr	r3, [pc, #204]	; (800076c <MCAL_SPI_Init+0x10c>)
 800069e:	69db      	ldr	r3, [r3, #28]
 80006a0:	4a32      	ldr	r2, [pc, #200]	; (800076c <MCAL_SPI_Init+0x10c>)
 80006a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a6:	61d3      	str	r3, [r2, #28]
	}

	// Enable SPI CR1: BIT 6 SPE : SPI Enable
	TempReg_CR1 = (0x1U<<6) ;
 80006a8:	2340      	movs	r3, #64	; 0x40
 80006aa:	81fb      	strh	r3, [r7, #14]

	// Master/ Slave
	TempReg_CR1 |= SPI_Congig->Device_Mode ;
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	881a      	ldrh	r2, [r3, #0]
 80006b0:	89fb      	ldrh	r3, [r7, #14]
 80006b2:	4313      	orrs	r3, r2
 80006b4:	81fb      	strh	r3, [r7, #14]

	// SPI Communication Mode
	TempReg_CR1 |= SPI_Congig->Communication_Mode ;
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	885a      	ldrh	r2, [r3, #2]
 80006ba:	89fb      	ldrh	r3, [r7, #14]
 80006bc:	4313      	orrs	r3, r2
 80006be:	81fb      	strh	r3, [r7, #14]

	// SPI Frame Format
	TempReg_CR1 |= SPI_Congig->Frame_Format ;
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	889a      	ldrh	r2, [r3, #4]
 80006c4:	89fb      	ldrh	r3, [r7, #14]
 80006c6:	4313      	orrs	r3, r2
 80006c8:	81fb      	strh	r3, [r7, #14]

	// SPI DataSize Frame Format
	TempReg_CR1 |= SPI_Congig->DataSize_Frame_Format ;
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	88da      	ldrh	r2, [r3, #6]
 80006ce:	89fb      	ldrh	r3, [r7, #14]
 80006d0:	4313      	orrs	r3, r2
 80006d2:	81fb      	strh	r3, [r7, #14]

	// SPI CLKPolarity
	TempReg_CR1 |= SPI_Congig->CLKPolarity ;
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	891a      	ldrh	r2, [r3, #8]
 80006d8:	89fb      	ldrh	r3, [r7, #14]
 80006da:	4313      	orrs	r3, r2
 80006dc:	81fb      	strh	r3, [r7, #14]

	// SPI CLKPhese
	TempReg_CR1 |= SPI_Congig->CLKPhese ;
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	895a      	ldrh	r2, [r3, #10]
 80006e2:	89fb      	ldrh	r3, [r7, #14]
 80006e4:	4313      	orrs	r3, r2
 80006e6:	81fb      	strh	r3, [r7, #14]

	// SPI NSS
	if(SPI_Congig->NSS == SPI_NSS_Hardware_Master_SS_Output_Enable){
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	899b      	ldrh	r3, [r3, #12]
 80006ec:	2b04      	cmp	r3, #4
 80006ee:	d105      	bne.n	80006fc <MCAL_SPI_Init+0x9c>
		TempReg_CR2 |= SPI_Congig->NSS ;									// ========================Hardware============================
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	899a      	ldrh	r2, [r3, #12]
 80006f4:	89bb      	ldrh	r3, [r7, #12]
 80006f6:	4313      	orrs	r3, r2
 80006f8:	81bb      	strh	r3, [r7, #12]
 80006fa:	e004      	b.n	8000706 <MCAL_SPI_Init+0xa6>
	}
	else if(SPI_Congig->NSS == SPI_NSS_Hardware_Master_SS_Output_Disable){	// ========================Hardware============================
		TempReg_CR2 &= SPI_Congig->NSS ;
	}
	else{
		TempReg_CR1 |= SPI_Congig->NSS ;									// ==================Software(Master | Slave)==================
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	899a      	ldrh	r2, [r3, #12]
 8000700:	89fb      	ldrh	r3, [r7, #14]
 8000702:	4313      	orrs	r3, r2
 8000704:	81fb      	strh	r3, [r7, #14]

	}

	// SPI BaudRate PreScaler
	TempReg_CR1 |= SPI_Congig->SPI_BaudRate_PreScaler ;
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	89da      	ldrh	r2, [r3, #14]
 800070a:	89fb      	ldrh	r3, [r7, #14]
 800070c:	4313      	orrs	r3, r2
 800070e:	81fb      	strh	r3, [r7, #14]

	// SPI IRQ Enable
	if(SPI_Congig->IRQ_Enable != SPI_IRQ_Enable_NONE){
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	8a1b      	ldrh	r3, [r3, #16]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d019      	beq.n	800074c <MCAL_SPI_Init+0xec>
		// SPI Interrupt Enable
		TempReg_CR2 |= SPI_Congig->IRQ_Enable ;
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	8a1a      	ldrh	r2, [r3, #16]
 800071c:	89bb      	ldrh	r3, [r7, #12]
 800071e:	4313      	orrs	r3, r2
 8000720:	81bb      	strh	r3, [r7, #12]

		if(SPIx == SPI1){
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4a0f      	ldr	r2, [pc, #60]	; (8000764 <MCAL_SPI_Init+0x104>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d106      	bne.n	8000738 <MCAL_SPI_Init+0xd8>
			NVIC_IRQ35_SPI1_Enable ;
 800072a:	4b12      	ldr	r3, [pc, #72]	; (8000774 <MCAL_SPI_Init+0x114>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a11      	ldr	r2, [pc, #68]	; (8000774 <MCAL_SPI_Init+0x114>)
 8000730:	f043 0308 	orr.w	r3, r3, #8
 8000734:	6013      	str	r3, [r2, #0]
 8000736:	e009      	b.n	800074c <MCAL_SPI_Init+0xec>
		}
		else if(SPIx == SPI2){
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	4a0d      	ldr	r2, [pc, #52]	; (8000770 <MCAL_SPI_Init+0x110>)
 800073c:	4293      	cmp	r3, r2
 800073e:	d105      	bne.n	800074c <MCAL_SPI_Init+0xec>
			NVIC_IRQ36_SPI2_Enable ;
 8000740:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <MCAL_SPI_Init+0x114>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a0b      	ldr	r2, [pc, #44]	; (8000774 <MCAL_SPI_Init+0x114>)
 8000746:	f043 0310 	orr.w	r3, r3, #16
 800074a:	6013      	str	r3, [r2, #0]
		}
	}

	SPIx->SPI_CR1 = TempReg_CR1 ;
 800074c:	89fa      	ldrh	r2, [r7, #14]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	601a      	str	r2, [r3, #0]
	SPIx->SPI_CR2 = TempReg_CR2 ;
 8000752:	89ba      	ldrh	r2, [r7, #12]
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	605a      	str	r2, [r3, #4]

}
 8000758:	bf00      	nop
 800075a:	3714      	adds	r7, #20
 800075c:	46bd      	mov	sp, r7
 800075e:	bc80      	pop	{r7}
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	40013000 	.word	0x40013000
 8000768:	2000001c 	.word	0x2000001c
 800076c:	40021000 	.word	0x40021000
 8000770:	40003800 	.word	0x40003800
 8000774:	e000e104 	.word	0xe000e104

08000778 <MCAL_SPI_GPIO_Set_Pins>:
 * @retval				- NONE
 * Note					- NONE
 */

void MCAL_SPI_GPIO_Set_Pins(SPI_Typedef* SPIx)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t pincfg ;
	if(SPIx == SPI1){
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4a73      	ldr	r2, [pc, #460]	; (8000950 <MCAL_SPI_GPIO_Set_Pins+0x1d8>)
 8000784:	4293      	cmp	r3, r2
 8000786:	d169      	bne.n	800085c <MCAL_SPI_GPIO_Set_Pins+0xe4>
		//SPI1_NSS  : PA4
		//SPI1_SCK  : PA5
		//SPI1_MISO : PA6
		//SPI1_MOSI : PA7

		if(Global_SPI_Congig[SPI1_INDEX]->Device_Mode == SPI_Device_Mode_MASTER){
 8000788:	4b72      	ldr	r3, [pc, #456]	; (8000954 <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	881b      	ldrh	r3, [r3, #0]
 800078e:	2b04      	cmp	r3, #4
 8000790:	d134      	bne.n	80007fc <MCAL_SPI_GPIO_Set_Pins+0x84>
			//SPI1_NSS  : PA4
			switch(Global_SPI_Congig[SPI1_INDEX]->NSS){
 8000792:	4b70      	ldr	r3, [pc, #448]	; (8000954 <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	899b      	ldrh	r3, [r3, #12]
 8000798:	2b04      	cmp	r3, #4
 800079a:	d10c      	bne.n	80007b6 <MCAL_SPI_GPIO_Set_Pins+0x3e>
				MCAL_GPIO_Init(GPIOA, &pincfg) ;
				break ;

			case SPI_NSS_Hardware_Master_SS_Output_Enable :
				//SPIx_NSS Hardware master/ NSS output enabled Alternate function push-pull
				pincfg.GPIO_PinNumber = GPIO_PIN_4 ;
 800079c:	2310      	movs	r3, #16
 800079e:	81bb      	strh	r3, [r7, #12]
				pincfg.GPIO_MODE = GPIO_MODE_Output_AF_Push_pull ;
 80007a0:	2306      	movs	r3, #6
 80007a2:	73bb      	strb	r3, [r7, #14]
				pincfg.GPIO_Output_Speed = GPIO_Output_Speed_10M ;
 80007a4:	2301      	movs	r3, #1
 80007a6:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOA, &pincfg) ;
 80007a8:	f107 030c 	add.w	r3, r7, #12
 80007ac:	4619      	mov	r1, r3
 80007ae:	486a      	ldr	r0, [pc, #424]	; (8000958 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 80007b0:	f7ff fe51 	bl	8000456 <MCAL_GPIO_Init>
				break ;
 80007b4:	bf00      	nop
			}

			// SPI1_SCK  : PA5
			// SPIx_SCK Master Alternate function push-pull
			pincfg.GPIO_PinNumber = GPIO_PIN_5 ;
 80007b6:	2320      	movs	r3, #32
 80007b8:	81bb      	strh	r3, [r7, #12]
			pincfg.GPIO_MODE = GPIO_MODE_Output_AF_Push_pull ;
 80007ba:	2306      	movs	r3, #6
 80007bc:	73bb      	strb	r3, [r7, #14]
			pincfg.GPIO_Output_Speed = GPIO_Output_Speed_10M ;
 80007be:	2301      	movs	r3, #1
 80007c0:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &pincfg) ;
 80007c2:	f107 030c 	add.w	r3, r7, #12
 80007c6:	4619      	mov	r1, r3
 80007c8:	4863      	ldr	r0, [pc, #396]	; (8000958 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 80007ca:	f7ff fe44 	bl	8000456 <MCAL_GPIO_Init>

			// SPI1_MISO : PA6
			// SPIx_MISO Full duplex / master Input floating / Input pull-up
			pincfg.GPIO_PinNumber = GPIO_PIN_6 ;
 80007ce:	2340      	movs	r3, #64	; 0x40
 80007d0:	81bb      	strh	r3, [r7, #12]
			pincfg.GPIO_MODE = GPIO_MODE_Input_Floating ;
 80007d2:	2301      	movs	r3, #1
 80007d4:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &pincfg) ;
 80007d6:	f107 030c 	add.w	r3, r7, #12
 80007da:	4619      	mov	r1, r3
 80007dc:	485e      	ldr	r0, [pc, #376]	; (8000958 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 80007de:	f7ff fe3a 	bl	8000456 <MCAL_GPIO_Init>

			// SPI1_MOSI : PA7
			// SPIx_MOSI Full duplex / master Alternate function push-pull
			pincfg.GPIO_PinNumber = GPIO_PIN_7 ;
 80007e2:	2380      	movs	r3, #128	; 0x80
 80007e4:	81bb      	strh	r3, [r7, #12]
			pincfg.GPIO_MODE = GPIO_MODE_Output_AF_Push_pull ;
 80007e6:	2306      	movs	r3, #6
 80007e8:	73bb      	strb	r3, [r7, #14]
			pincfg.GPIO_Output_Speed = GPIO_Output_Speed_10M ;
 80007ea:	2301      	movs	r3, #1
 80007ec:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &pincfg) ;
 80007ee:	f107 030c 	add.w	r3, r7, #12
 80007f2:	4619      	mov	r1, r3
 80007f4:	4858      	ldr	r0, [pc, #352]	; (8000958 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 80007f6:	f7ff fe2e 	bl	8000456 <MCAL_GPIO_Init>

		}

	}

}
 80007fa:	e0a4      	b.n	8000946 <MCAL_SPI_GPIO_Set_Pins+0x1ce>
			if(Global_SPI_Congig[SPI1_INDEX]->NSS == SPI_NSS_Hardware_Slave){
 80007fc:	4b55      	ldr	r3, [pc, #340]	; (8000954 <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	899b      	ldrh	r3, [r3, #12]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d109      	bne.n	800081a <MCAL_SPI_GPIO_Set_Pins+0xa2>
				pincfg.GPIO_PinNumber = GPIO_PIN_4 ;
 8000806:	2310      	movs	r3, #16
 8000808:	81bb      	strh	r3, [r7, #12]
				pincfg.GPIO_MODE = GPIO_MODE_Input_Floating ;
 800080a:	2301      	movs	r3, #1
 800080c:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOA, &pincfg) ;
 800080e:	f107 030c 	add.w	r3, r7, #12
 8000812:	4619      	mov	r1, r3
 8000814:	4850      	ldr	r0, [pc, #320]	; (8000958 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 8000816:	f7ff fe1e 	bl	8000456 <MCAL_GPIO_Init>
			pincfg.GPIO_PinNumber = GPIO_PIN_5 ;
 800081a:	2320      	movs	r3, #32
 800081c:	81bb      	strh	r3, [r7, #12]
			pincfg.GPIO_MODE = GPIO_MODE_Input_Floating ;
 800081e:	2301      	movs	r3, #1
 8000820:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &pincfg) ;
 8000822:	f107 030c 	add.w	r3, r7, #12
 8000826:	4619      	mov	r1, r3
 8000828:	484b      	ldr	r0, [pc, #300]	; (8000958 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 800082a:	f7ff fe14 	bl	8000456 <MCAL_GPIO_Init>
			pincfg.GPIO_PinNumber = GPIO_PIN_6 ;
 800082e:	2340      	movs	r3, #64	; 0x40
 8000830:	81bb      	strh	r3, [r7, #12]
			pincfg.GPIO_MODE = GPIO_MODE_Output_AF_Push_pull;
 8000832:	2306      	movs	r3, #6
 8000834:	73bb      	strb	r3, [r7, #14]
			pincfg.GPIO_Output_Speed = GPIO_Output_Speed_10M ;
 8000836:	2301      	movs	r3, #1
 8000838:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &pincfg) ;
 800083a:	f107 030c 	add.w	r3, r7, #12
 800083e:	4619      	mov	r1, r3
 8000840:	4845      	ldr	r0, [pc, #276]	; (8000958 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 8000842:	f7ff fe08 	bl	8000456 <MCAL_GPIO_Init>
			pincfg.GPIO_PinNumber = GPIO_PIN_7 ;
 8000846:	2380      	movs	r3, #128	; 0x80
 8000848:	81bb      	strh	r3, [r7, #12]
			pincfg.GPIO_MODE = GPIO_MODE_Input_AF;
 800084a:	2308      	movs	r3, #8
 800084c:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &pincfg) ;
 800084e:	f107 030c 	add.w	r3, r7, #12
 8000852:	4619      	mov	r1, r3
 8000854:	4840      	ldr	r0, [pc, #256]	; (8000958 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 8000856:	f7ff fdfe 	bl	8000456 <MCAL_GPIO_Init>
}
 800085a:	e074      	b.n	8000946 <MCAL_SPI_GPIO_Set_Pins+0x1ce>
	else if(SPIx == SPI2){
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	4a3f      	ldr	r2, [pc, #252]	; (800095c <MCAL_SPI_GPIO_Set_Pins+0x1e4>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d170      	bne.n	8000946 <MCAL_SPI_GPIO_Set_Pins+0x1ce>
		if(Global_SPI_Congig[SPI2_INDEX]->Device_Mode == SPI_Device_Mode_MASTER){
 8000864:	4b3b      	ldr	r3, [pc, #236]	; (8000954 <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	881b      	ldrh	r3, [r3, #0]
 800086a:	2b04      	cmp	r3, #4
 800086c:	d138      	bne.n	80008e0 <MCAL_SPI_GPIO_Set_Pins+0x168>
			switch(Global_SPI_Congig[SPI2_INDEX]->NSS){
 800086e:	4b39      	ldr	r3, [pc, #228]	; (8000954 <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	899b      	ldrh	r3, [r3, #12]
 8000874:	2b04      	cmp	r3, #4
 8000876:	d10d      	bne.n	8000894 <MCAL_SPI_GPIO_Set_Pins+0x11c>
				pincfg.GPIO_PinNumber = GPIO_PIN_12 ;
 8000878:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800087c:	81bb      	strh	r3, [r7, #12]
				pincfg.GPIO_MODE = GPIO_MODE_Output_AF_Push_pull ;
 800087e:	2306      	movs	r3, #6
 8000880:	73bb      	strb	r3, [r7, #14]
				pincfg.GPIO_Output_Speed = GPIO_Output_Speed_10M ;
 8000882:	2301      	movs	r3, #1
 8000884:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOB, &pincfg) ;
 8000886:	f107 030c 	add.w	r3, r7, #12
 800088a:	4619      	mov	r1, r3
 800088c:	4834      	ldr	r0, [pc, #208]	; (8000960 <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 800088e:	f7ff fde2 	bl	8000456 <MCAL_GPIO_Init>
				break ;
 8000892:	bf00      	nop
			pincfg.GPIO_PinNumber = GPIO_PIN_13 ;
 8000894:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000898:	81bb      	strh	r3, [r7, #12]
			pincfg.GPIO_MODE = GPIO_MODE_Output_AF_Push_pull ;
 800089a:	2306      	movs	r3, #6
 800089c:	73bb      	strb	r3, [r7, #14]
			pincfg.GPIO_Output_Speed = GPIO_Output_Speed_10M ;
 800089e:	2301      	movs	r3, #1
 80008a0:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &pincfg) ;
 80008a2:	f107 030c 	add.w	r3, r7, #12
 80008a6:	4619      	mov	r1, r3
 80008a8:	482d      	ldr	r0, [pc, #180]	; (8000960 <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 80008aa:	f7ff fdd4 	bl	8000456 <MCAL_GPIO_Init>
			pincfg.GPIO_PinNumber = GPIO_PIN_14 ;
 80008ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008b2:	81bb      	strh	r3, [r7, #12]
			pincfg.GPIO_MODE = GPIO_MODE_Input_Floating ;
 80008b4:	2301      	movs	r3, #1
 80008b6:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &pincfg) ;
 80008b8:	f107 030c 	add.w	r3, r7, #12
 80008bc:	4619      	mov	r1, r3
 80008be:	4828      	ldr	r0, [pc, #160]	; (8000960 <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 80008c0:	f7ff fdc9 	bl	8000456 <MCAL_GPIO_Init>
			pincfg.GPIO_PinNumber = GPIO_PIN_15 ;
 80008c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008c8:	81bb      	strh	r3, [r7, #12]
			pincfg.GPIO_MODE = GPIO_MODE_Output_AF_Push_pull ;
 80008ca:	2306      	movs	r3, #6
 80008cc:	73bb      	strb	r3, [r7, #14]
			pincfg.GPIO_Output_Speed = GPIO_Output_Speed_10M ;
 80008ce:	2301      	movs	r3, #1
 80008d0:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &pincfg) ;
 80008d2:	f107 030c 	add.w	r3, r7, #12
 80008d6:	4619      	mov	r1, r3
 80008d8:	4821      	ldr	r0, [pc, #132]	; (8000960 <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 80008da:	f7ff fdbc 	bl	8000456 <MCAL_GPIO_Init>
}
 80008de:	e032      	b.n	8000946 <MCAL_SPI_GPIO_Set_Pins+0x1ce>
			if(Global_SPI_Congig[SPI2_INDEX]->NSS == SPI_NSS_Hardware_Slave){
 80008e0:	4b1c      	ldr	r3, [pc, #112]	; (8000954 <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	899b      	ldrh	r3, [r3, #12]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d10a      	bne.n	8000900 <MCAL_SPI_GPIO_Set_Pins+0x188>
				pincfg.GPIO_PinNumber = GPIO_PIN_12 ;
 80008ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ee:	81bb      	strh	r3, [r7, #12]
				pincfg.GPIO_MODE = GPIO_MODE_Input_Floating ;
 80008f0:	2301      	movs	r3, #1
 80008f2:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOB, &pincfg) ;
 80008f4:	f107 030c 	add.w	r3, r7, #12
 80008f8:	4619      	mov	r1, r3
 80008fa:	4819      	ldr	r0, [pc, #100]	; (8000960 <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 80008fc:	f7ff fdab 	bl	8000456 <MCAL_GPIO_Init>
			pincfg.GPIO_PinNumber = GPIO_PIN_13 ;
 8000900:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000904:	81bb      	strh	r3, [r7, #12]
			pincfg.GPIO_MODE = GPIO_MODE_Input_Floating ;
 8000906:	2301      	movs	r3, #1
 8000908:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &pincfg) ;
 800090a:	f107 030c 	add.w	r3, r7, #12
 800090e:	4619      	mov	r1, r3
 8000910:	4813      	ldr	r0, [pc, #76]	; (8000960 <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 8000912:	f7ff fda0 	bl	8000456 <MCAL_GPIO_Init>
			pincfg.GPIO_PinNumber = GPIO_PIN_14 ;
 8000916:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800091a:	81bb      	strh	r3, [r7, #12]
			pincfg.GPIO_MODE = GPIO_MODE_Output_AF_Push_pull;
 800091c:	2306      	movs	r3, #6
 800091e:	73bb      	strb	r3, [r7, #14]
			pincfg.GPIO_Output_Speed = GPIO_Output_Speed_10M ;
 8000920:	2301      	movs	r3, #1
 8000922:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &pincfg) ;
 8000924:	f107 030c 	add.w	r3, r7, #12
 8000928:	4619      	mov	r1, r3
 800092a:	480d      	ldr	r0, [pc, #52]	; (8000960 <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 800092c:	f7ff fd93 	bl	8000456 <MCAL_GPIO_Init>
			pincfg.GPIO_PinNumber = GPIO_PIN_15 ;
 8000930:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000934:	81bb      	strh	r3, [r7, #12]
			pincfg.GPIO_MODE = GPIO_MODE_Input_AF;
 8000936:	2308      	movs	r3, #8
 8000938:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &pincfg) ;
 800093a:	f107 030c 	add.w	r3, r7, #12
 800093e:	4619      	mov	r1, r3
 8000940:	4807      	ldr	r0, [pc, #28]	; (8000960 <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 8000942:	f7ff fd88 	bl	8000456 <MCAL_GPIO_Init>
}
 8000946:	bf00      	nop
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40013000 	.word	0x40013000
 8000954:	2000001c 	.word	0x2000001c
 8000958:	40010800 	.word	0x40010800
 800095c:	40003800 	.word	0x40003800
 8000960:	40010c00 	.word	0x40010c00

08000964 <MCAL_SPI_Send_Receive_Data>:
 * @retval				- NONE
 * Note					- NONE
 */

void MCAL_SPI_Send_Receive_Data(SPI_Typedef* SPIx , uint16_t* pTXBuffer , enum PollingMichanism PollingEnable)
{
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	60b9      	str	r1, [r7, #8]
 800096e:	4613      	mov	r3, r2
 8000970:	71fb      	strb	r3, [r7, #7]
	// SEND DATA
	if(PollingEnable == Polling_Enable)
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d106      	bne.n	8000986 <MCAL_SPI_Send_Receive_Data+0x22>
		while (!((SPIx->SPI_SR) & SPI_SR_TXE)) ;
 8000978:	bf00      	nop
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	689b      	ldr	r3, [r3, #8]
 800097e:	f003 0302 	and.w	r3, r3, #2
 8000982:	2b00      	cmp	r3, #0
 8000984:	d0f9      	beq.n	800097a <MCAL_SPI_Send_Receive_Data+0x16>
	SPIx->SPI_DR = *pTXBuffer ;
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	881b      	ldrh	r3, [r3, #0]
 800098a:	461a      	mov	r2, r3
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	60da      	str	r2, [r3, #12]

	// Receive Data
	if(PollingEnable == Polling_Enable)
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d106      	bne.n	80009a4 <MCAL_SPI_Send_Receive_Data+0x40>
		while (!((SPIx->SPI_SR) & SPI_SR_RXNE)) ;
 8000996:	bf00      	nop
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	689b      	ldr	r3, [r3, #8]
 800099c:	f003 0301 	and.w	r3, r3, #1
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d0f9      	beq.n	8000998 <MCAL_SPI_Send_Receive_Data+0x34>
	*pTXBuffer = SPIx->SPI_DR ;
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	b29a      	uxth	r2, r3
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	801a      	strh	r2, [r3, #0]

}
 80009ae:	bf00      	nop
 80009b0:	3714      	adds	r7, #20
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr

080009b8 <SPI1_IRQHandler>:


//========================================== IRQ ==========================================

void SPI1_IRQHandler(void){
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0

	struct S_IRQ_SRC irq_src ;

	irq_src.TXE =  ( ((SPI1->SPI_SR) & (1<<1)) >> 1) ;
 80009be:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <SPI1_IRQHandler+0x54>)
 80009c0:	689b      	ldr	r3, [r3, #8]
 80009c2:	085b      	lsrs	r3, r3, #1
 80009c4:	f003 0301 	and.w	r3, r3, #1
 80009c8:	b2da      	uxtb	r2, r3
 80009ca:	793b      	ldrb	r3, [r7, #4]
 80009cc:	f362 0300 	bfi	r3, r2, #0, #1
 80009d0:	713b      	strb	r3, [r7, #4]
	irq_src.RXEN = ( ((SPI1->SPI_SR) & (1<<0)) >> 0) ;
 80009d2:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <SPI1_IRQHandler+0x54>)
 80009d4:	689b      	ldr	r3, [r3, #8]
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	b2da      	uxtb	r2, r3
 80009dc:	793b      	ldrb	r3, [r7, #4]
 80009de:	f362 0341 	bfi	r3, r2, #1, #1
 80009e2:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( ((SPI1->SPI_SR) & (1<<4)) >> 4) ;
 80009e4:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <SPI1_IRQHandler+0x54>)
 80009e6:	689b      	ldr	r3, [r3, #8]
 80009e8:	091b      	lsrs	r3, r3, #4
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	b2da      	uxtb	r2, r3
 80009f0:	793b      	ldrb	r3, [r7, #4]
 80009f2:	f362 0382 	bfi	r3, r2, #2, #1
 80009f6:	713b      	strb	r3, [r7, #4]

	Global_SPI_Congig[SPI1_INDEX]->P_IRQ_CallBack(irq_src) ;
 80009f8:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <SPI1_IRQHandler+0x58>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	695b      	ldr	r3, [r3, #20]
 80009fe:	7938      	ldrb	r0, [r7, #4]
 8000a00:	4798      	blx	r3
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40013000 	.word	0x40013000
 8000a10:	2000001c 	.word	0x2000001c

08000a14 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void){
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0

	struct S_IRQ_SRC irq_src ;

	irq_src.TXE =  ( ((SPI2->SPI_SR) & (1<<1)) >> 1) ;
 8000a1a:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <SPI2_IRQHandler+0x54>)
 8000a1c:	689b      	ldr	r3, [r3, #8]
 8000a1e:	085b      	lsrs	r3, r3, #1
 8000a20:	f003 0301 	and.w	r3, r3, #1
 8000a24:	b2da      	uxtb	r2, r3
 8000a26:	793b      	ldrb	r3, [r7, #4]
 8000a28:	f362 0300 	bfi	r3, r2, #0, #1
 8000a2c:	713b      	strb	r3, [r7, #4]
	irq_src.RXEN = ( ((SPI2->SPI_SR) & (1<<0)) >> 0) ;
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <SPI2_IRQHandler+0x54>)
 8000a30:	689b      	ldr	r3, [r3, #8]
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	b2da      	uxtb	r2, r3
 8000a38:	793b      	ldrb	r3, [r7, #4]
 8000a3a:	f362 0341 	bfi	r3, r2, #1, #1
 8000a3e:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( ((SPI2->SPI_SR) & (1<<4)) >> 4) ;
 8000a40:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <SPI2_IRQHandler+0x54>)
 8000a42:	689b      	ldr	r3, [r3, #8]
 8000a44:	091b      	lsrs	r3, r3, #4
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	b2da      	uxtb	r2, r3
 8000a4c:	793b      	ldrb	r3, [r7, #4]
 8000a4e:	f362 0382 	bfi	r3, r2, #2, #1
 8000a52:	713b      	strb	r3, [r7, #4]

	Global_SPI_Congig[SPI2_INDEX]->P_IRQ_CallBack(irq_src) ;
 8000a54:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <SPI2_IRQHandler+0x58>)
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	695b      	ldr	r3, [r3, #20]
 8000a5a:	7938      	ldrb	r0, [r7, #4]
 8000a5c:	4798      	blx	r3

}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40003800 	.word	0x40003800
 8000a6c:	2000001c 	.word	0x2000001c

08000a70 <MCAL_UART_Init>:
 *
 *
 */

void MCAL_UART_Init(USART_Typedef* USARTx , UART_Config* UART_Config)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	6039      	str	r1, [r7, #0]
	uint32_t Pclk , BRR ;

	Global_UART_Config = UART_Config ;
 8000a7a:	4a57      	ldr	r2, [pc, #348]	; (8000bd8 <MCAL_UART_Init+0x168>)
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	6013      	str	r3, [r2, #0]

	// Enable The Clock for  given USART Peripheral
	if(USARTx == USART1)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	4a56      	ldr	r2, [pc, #344]	; (8000bdc <MCAL_UART_Init+0x16c>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d106      	bne.n	8000a96 <MCAL_UART_Init+0x26>
		RCC_USART1_CLK_EN() ;
 8000a88:	4b55      	ldr	r3, [pc, #340]	; (8000be0 <MCAL_UART_Init+0x170>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	4a54      	ldr	r2, [pc, #336]	; (8000be0 <MCAL_UART_Init+0x170>)
 8000a8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a92:	6193      	str	r3, [r2, #24]
 8000a94:	e014      	b.n	8000ac0 <MCAL_UART_Init+0x50>

	else if(USARTx == USART2)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4a52      	ldr	r2, [pc, #328]	; (8000be4 <MCAL_UART_Init+0x174>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d106      	bne.n	8000aac <MCAL_UART_Init+0x3c>
		RCC_USART2_CLK_EN() ;
 8000a9e:	4b50      	ldr	r3, [pc, #320]	; (8000be0 <MCAL_UART_Init+0x170>)
 8000aa0:	69db      	ldr	r3, [r3, #28]
 8000aa2:	4a4f      	ldr	r2, [pc, #316]	; (8000be0 <MCAL_UART_Init+0x170>)
 8000aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa8:	61d3      	str	r3, [r2, #28]
 8000aaa:	e009      	b.n	8000ac0 <MCAL_UART_Init+0x50>

	else if(USARTx == USART3)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4a4e      	ldr	r2, [pc, #312]	; (8000be8 <MCAL_UART_Init+0x178>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d105      	bne.n	8000ac0 <MCAL_UART_Init+0x50>
		RCC_USART3_CLK_EN() ;
 8000ab4:	4b4a      	ldr	r3, [pc, #296]	; (8000be0 <MCAL_UART_Init+0x170>)
 8000ab6:	69db      	ldr	r3, [r3, #28]
 8000ab8:	4a49      	ldr	r2, [pc, #292]	; (8000be0 <MCAL_UART_Init+0x170>)
 8000aba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000abe:	61d3      	str	r3, [r2, #28]

	// Enable UART Module
	//Bit 13 UE: USART enable
	USARTx->USART_CR1 |= 1<<13 ;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	60da      	str	r2, [r3, #12]

	// Enable USART TX and RX Engines according to the USART_MODE Configuration item
	// USART_CR1 Bit 3 TE: Transmitter enable , Bit 2 RE: Receiver enable
	USARTx->USART_CR1 |= UART_Config->UART_Mode ;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	683a      	ldr	r2, [r7, #0]
 8000ad2:	7812      	ldrb	r2, [r2, #0]
 8000ad4:	431a      	orrs	r2, r3
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	60da      	str	r2, [r3, #12]

	// PAYLOAD Width
	// USARTx->USART_CR1 Bit 12 M: Word length
	USARTx->USART_CR1 |= UART_Config->Payload_length ;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	68db      	ldr	r3, [r3, #12]
 8000ade:	683a      	ldr	r2, [r7, #0]
 8000ae0:	7a12      	ldrb	r2, [r2, #8]
 8000ae2:	431a      	orrs	r2, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	60da      	str	r2, [r3, #12]

	// Configuration of Parity Control bit fields
	// USARTx->USART_CR1 Bit 10 PCE: Parity control enable , Bit 9 PS: Parity selection
	USARTx->USART_CR1 |= UART_Config->Parity ;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	683a      	ldr	r2, [r7, #0]
 8000aee:	7a52      	ldrb	r2, [r2, #9]
 8000af0:	431a      	orrs	r2, r3
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	60da      	str	r2, [r3, #12]

	// Configuration of the number of stop bits
	// USARTx->USART_CR2 Bits 13:12 STOP: STOP bits
	USARTx->USART_CR2 |= UART_Config->Stop_Bits ;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	691b      	ldr	r3, [r3, #16]
 8000afa:	683a      	ldr	r2, [r7, #0]
 8000afc:	7a92      	ldrb	r2, [r2, #10]
 8000afe:	431a      	orrs	r2, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	611a      	str	r2, [r3, #16]

	// Configuration of USART Hardware Flow Control
	// USARTx->USART_CR3 Bit 9 CTSE: CTS enable , Bit 8 RTSE: RTS enable
	USARTx->USART_CR3 |= UART_Config->HW_Flow_Conterl ;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	695b      	ldr	r3, [r3, #20]
 8000b08:	683a      	ldr	r2, [r7, #0]
 8000b0a:	7ad2      	ldrb	r2, [r2, #11]
 8000b0c:	431a      	orrs	r2, r3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	615a      	str	r2, [r3, #20]

	// Configuration of BRR (Baudrate register)
	// PCLK1 for USART 2 , 3
	// PCLK2 for USART 1

	if( USARTx == USART1 ){
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4a31      	ldr	r2, [pc, #196]	; (8000bdc <MCAL_UART_Init+0x16c>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d103      	bne.n	8000b22 <MCAL_UART_Init+0xb2>
		Pclk = MCAL_RCC_Get_PCLK2_Frequency() ;
 8000b1a:	f7ff fd8d 	bl	8000638 <MCAL_RCC_Get_PCLK2_Frequency>
 8000b1e:	60f8      	str	r0, [r7, #12]
 8000b20:	e002      	b.n	8000b28 <MCAL_UART_Init+0xb8>
	}
	else {
		Pclk = MCAL_RCC_Get_PCLK1_Frequency() ;
 8000b22:	f7ff fd75 	bl	8000610 <MCAL_RCC_Get_PCLK1_Frequency>
 8000b26:	60f8      	str	r0, [r7, #12]
	}

	BRR = UART_BRR_Register(Pclk , UART_Config->BaudRate ) ;
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	011b      	lsls	r3, r3, #4
 8000b2e:	68fa      	ldr	r2, [r7, #12]
 8000b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b34:	0119      	lsls	r1, r3, #4
 8000b36:	68fa      	ldr	r2, [r7, #12]
 8000b38:	4613      	mov	r3, r2
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	4413      	add	r3, r2
 8000b3e:	009a      	lsls	r2, r3, #2
 8000b40:	441a      	add	r2, r3
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	fbb2 f2f3 	udiv	r2, r2, r3
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	011b      	lsls	r3, r3, #4
 8000b52:	68f8      	ldr	r0, [r7, #12]
 8000b54:	fbb0 f3f3 	udiv	r3, r0, r3
 8000b58:	2064      	movs	r0, #100	; 0x64
 8000b5a:	fb00 f303 	mul.w	r3, r0, r3
 8000b5e:	1ad3      	subs	r3, r2, r3
 8000b60:	011b      	lsls	r3, r3, #4
 8000b62:	4a22      	ldr	r2, [pc, #136]	; (8000bec <MCAL_UART_Init+0x17c>)
 8000b64:	fba2 2303 	umull	r2, r3, r2, r3
 8000b68:	095b      	lsrs	r3, r3, #5
 8000b6a:	f003 030f 	and.w	r3, r3, #15
 8000b6e:	430b      	orrs	r3, r1
 8000b70:	60bb      	str	r3, [r7, #8]
	USARTx->USART_BRR = BRR ;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	68ba      	ldr	r2, [r7, #8]
 8000b76:	609a      	str	r2, [r3, #8]

	// Enable / Disable Interrupt
	// USART_CR1
	if(UART_Config->IRQ_Enable != UART_IRQ_Enable_NONE  ){
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	7b1b      	ldrb	r3, [r3, #12]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d026      	beq.n	8000bce <MCAL_UART_Init+0x15e>
		USARTx->USART_CR1 |= (UART_Config->IRQ_Enable) ;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	683a      	ldr	r2, [r7, #0]
 8000b86:	7b12      	ldrb	r2, [r2, #12]
 8000b88:	431a      	orrs	r2, r3
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	60da      	str	r2, [r3, #12]

		//  Enable For NVIC UARTx IRQ
		if(USARTx == USART1)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4a12      	ldr	r2, [pc, #72]	; (8000bdc <MCAL_UART_Init+0x16c>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d106      	bne.n	8000ba4 <MCAL_UART_Init+0x134>
			NVIC_IRQ37_USART1_Enable ;
 8000b96:	4b16      	ldr	r3, [pc, #88]	; (8000bf0 <MCAL_UART_Init+0x180>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a15      	ldr	r2, [pc, #84]	; (8000bf0 <MCAL_UART_Init+0x180>)
 8000b9c:	f043 0320 	orr.w	r3, r3, #32
 8000ba0:	6013      	str	r3, [r2, #0]
			NVIC_IRQ39_USART3_Enable;

	}


}
 8000ba2:	e014      	b.n	8000bce <MCAL_UART_Init+0x15e>
		else if(USARTx == USART2)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4a0f      	ldr	r2, [pc, #60]	; (8000be4 <MCAL_UART_Init+0x174>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d106      	bne.n	8000bba <MCAL_UART_Init+0x14a>
			NVIC_IRQ38_USART2_Enable ;
 8000bac:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <MCAL_UART_Init+0x180>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a0f      	ldr	r2, [pc, #60]	; (8000bf0 <MCAL_UART_Init+0x180>)
 8000bb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bb6:	6013      	str	r3, [r2, #0]
}
 8000bb8:	e009      	b.n	8000bce <MCAL_UART_Init+0x15e>
		else if(USARTx == USART3)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4a0a      	ldr	r2, [pc, #40]	; (8000be8 <MCAL_UART_Init+0x178>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d105      	bne.n	8000bce <MCAL_UART_Init+0x15e>
			NVIC_IRQ39_USART3_Enable;
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <MCAL_UART_Init+0x180>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a0a      	ldr	r2, [pc, #40]	; (8000bf0 <MCAL_UART_Init+0x180>)
 8000bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bcc:	6013      	str	r3, [r2, #0]
}
 8000bce:	bf00      	nop
 8000bd0:	3710      	adds	r7, #16
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000024 	.word	0x20000024
 8000bdc:	40013800 	.word	0x40013800
 8000be0:	40021000 	.word	0x40021000
 8000be4:	40004400 	.word	0x40004400
 8000be8:	40004800 	.word	0x40004800
 8000bec:	51eb851f 	.word	0x51eb851f
 8000bf0:	e000e104 	.word	0xe000e104

08000bf4 <MCAL_UART_GPIO_Set_Pins>:
 *
 *
 */

void MCAL_UART_GPIO_Set_Pins(USART_Typedef* USARTx)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PINCFG ;
	if(USARTx == USART1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4a2b      	ldr	r2, [pc, #172]	; (8000cac <MCAL_UART_GPIO_Set_Pins+0xb8>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d118      	bne.n	8000c36 <MCAL_UART_GPIO_Set_Pins+0x42>
		// PA10 => RX
		// PA11 => CTS
		// PA12 => RTS

		// PA9 => TX
		PINCFG.GPIO_PinNumber = GPIO_PIN_9 ;
 8000c04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c08:	81bb      	strh	r3, [r7, #12]
		PINCFG.GPIO_MODE = GPIO_MODE_Output_AF_Push_pull ;
 8000c0a:	2306      	movs	r3, #6
 8000c0c:	73bb      	strb	r3, [r7, #14]
		PINCFG.GPIO_Output_Speed = GPIO_Output_Speed_10M ;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PINCFG) ;
 8000c12:	f107 030c 	add.w	r3, r7, #12
 8000c16:	4619      	mov	r1, r3
 8000c18:	4825      	ldr	r0, [pc, #148]	; (8000cb0 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000c1a:	f7ff fc1c 	bl	8000456 <MCAL_GPIO_Init>

		// PA10 => RX
		PINCFG.GPIO_PinNumber = GPIO_PIN_10 ;
 8000c1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c22:	81bb      	strh	r3, [r7, #12]
		PINCFG.GPIO_MODE = GPIO_MODE_Input_AF ;
 8000c24:	2308      	movs	r3, #8
 8000c26:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PINCFG) ;
 8000c28:	f107 030c 	add.w	r3, r7, #12
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4820      	ldr	r0, [pc, #128]	; (8000cb0 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000c30:	f7ff fc11 	bl	8000456 <MCAL_GPIO_Init>
		}

	}


}
 8000c34:	e036      	b.n	8000ca4 <MCAL_UART_GPIO_Set_Pins+0xb0>
	else if(USARTx == USART2)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4a1e      	ldr	r2, [pc, #120]	; (8000cb4 <MCAL_UART_GPIO_Set_Pins+0xc0>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d116      	bne.n	8000c6c <MCAL_UART_GPIO_Set_Pins+0x78>
		PINCFG.GPIO_PinNumber = GPIO_PIN_2 ;
 8000c3e:	2304      	movs	r3, #4
 8000c40:	81bb      	strh	r3, [r7, #12]
		PINCFG.GPIO_MODE = GPIO_MODE_Output_AF_Push_pull ;
 8000c42:	2306      	movs	r3, #6
 8000c44:	73bb      	strb	r3, [r7, #14]
		PINCFG.GPIO_Output_Speed = GPIO_Output_Speed_10M ;
 8000c46:	2301      	movs	r3, #1
 8000c48:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PINCFG) ;
 8000c4a:	f107 030c 	add.w	r3, r7, #12
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4817      	ldr	r0, [pc, #92]	; (8000cb0 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000c52:	f7ff fc00 	bl	8000456 <MCAL_GPIO_Init>
		PINCFG.GPIO_PinNumber = GPIO_PIN_3 ;
 8000c56:	2308      	movs	r3, #8
 8000c58:	81bb      	strh	r3, [r7, #12]
		PINCFG.GPIO_MODE = GPIO_MODE_Input_AF ;
 8000c5a:	2308      	movs	r3, #8
 8000c5c:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PINCFG) ;
 8000c5e:	f107 030c 	add.w	r3, r7, #12
 8000c62:	4619      	mov	r1, r3
 8000c64:	4812      	ldr	r0, [pc, #72]	; (8000cb0 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000c66:	f7ff fbf6 	bl	8000456 <MCAL_GPIO_Init>
}
 8000c6a:	e01b      	b.n	8000ca4 <MCAL_UART_GPIO_Set_Pins+0xb0>
	else if(USARTx == USART3)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4a12      	ldr	r2, [pc, #72]	; (8000cb8 <MCAL_UART_GPIO_Set_Pins+0xc4>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d117      	bne.n	8000ca4 <MCAL_UART_GPIO_Set_Pins+0xb0>
		PINCFG.GPIO_PinNumber = GPIO_PIN_10 ;
 8000c74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c78:	81bb      	strh	r3, [r7, #12]
		PINCFG.GPIO_MODE = GPIO_MODE_Output_AF_Push_pull ;
 8000c7a:	2306      	movs	r3, #6
 8000c7c:	73bb      	strb	r3, [r7, #14]
		PINCFG.GPIO_Output_Speed = GPIO_Output_Speed_10M ;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PINCFG) ;
 8000c82:	f107 030c 	add.w	r3, r7, #12
 8000c86:	4619      	mov	r1, r3
 8000c88:	480c      	ldr	r0, [pc, #48]	; (8000cbc <MCAL_UART_GPIO_Set_Pins+0xc8>)
 8000c8a:	f7ff fbe4 	bl	8000456 <MCAL_GPIO_Init>
		PINCFG.GPIO_PinNumber = GPIO_PIN_11 ;
 8000c8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c92:	81bb      	strh	r3, [r7, #12]
		PINCFG.GPIO_MODE = GPIO_MODE_Input_AF ;
 8000c94:	2308      	movs	r3, #8
 8000c96:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &PINCFG) ;
 8000c98:	f107 030c 	add.w	r3, r7, #12
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4807      	ldr	r0, [pc, #28]	; (8000cbc <MCAL_UART_GPIO_Set_Pins+0xc8>)
 8000ca0:	f7ff fbd9 	bl	8000456 <MCAL_GPIO_Init>
}
 8000ca4:	bf00      	nop
 8000ca6:	3710      	adds	r7, #16
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	40013800 	.word	0x40013800
 8000cb0:	40010800 	.word	0x40010800
 8000cb4:	40004400 	.word	0x40004400
 8000cb8:	40004800 	.word	0x40004800
 8000cbc:	40010c00 	.word	0x40010c00

08000cc0 <MCAL_UART_Send_Data>:
 *
 *
 */

void MCAL_UART_Send_Data(USART_Typedef* USARTx , uint16_t* PTXBuffer , enum Polling_Michanism Polling_Enable)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	4613      	mov	r3, r2
 8000ccc:	71fb      	strb	r3, [r7, #7]
	// Wait until TXE flag is set in the SR
	if(Polling_Enable == Enable)
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d106      	bne.n	8000ce2 <MCAL_UART_Send_Data+0x22>
	{
		while(! (USARTx->USART_SR  & (1<<7 )) ) ;
 8000cd4:	bf00      	nop
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d0f9      	beq.n	8000cd6 <MCAL_UART_Send_Data+0x16>
	 */
	if(Global_UART_Config->Payload_length == UART_Payload_length_9B){
		USARTx->USART_DR = (*PTXBuffer & (uint16_t)0x01FF ) ;
	}
	else {
		USARTx->USART_DR = (*PTXBuffer & (uint8_t)0xFF ) ;
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	881b      	ldrh	r3, [r3, #0]
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	605a      	str	r2, [r3, #4]
	}



}
 8000cec:	bf00      	nop
 8000cee:	3714      	adds	r7, #20
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bc80      	pop	{r7}
 8000cf4:	4770      	bx	lr
	...

08000cf8 <USART1_IRQHandler>:



// ISR
void USART1_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack() ;
 8000cfc:	4b02      	ldr	r3, [pc, #8]	; (8000d08 <USART1_IRQHandler+0x10>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	691b      	ldr	r3, [r3, #16]
 8000d02:	4798      	blx	r3

}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20000024 	.word	0x20000024

08000d0c <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack() ;
 8000d10:	4b02      	ldr	r3, [pc, #8]	; (8000d1c <USART2_IRQHandler+0x10>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	691b      	ldr	r3, [r3, #16]
 8000d16:	4798      	blx	r3


}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	20000024 	.word	0x20000024

08000d20 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack() ;
 8000d24:	4b02      	ldr	r3, [pc, #8]	; (8000d30 <USART3_IRQHandler+0x10>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	691b      	ldr	r3, [r3, #16]
 8000d2a:	4798      	blx	r3


}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000024 	.word	0x20000024

08000d34 <Clock_init>:
#define MCU_Act_As_Slave

unsigned char ch ;

void Clock_init()
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
	// Enable Clock
	RCC_GPIOA_CLK_EN() ;
 8000d38:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <Clock_init+0x30>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	4a09      	ldr	r2, [pc, #36]	; (8000d64 <Clock_init+0x30>)
 8000d3e:	f043 0304 	orr.w	r3, r3, #4
 8000d42:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN() ;
 8000d44:	4b07      	ldr	r3, [pc, #28]	; (8000d64 <Clock_init+0x30>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	4a06      	ldr	r2, [pc, #24]	; (8000d64 <Clock_init+0x30>)
 8000d4a:	f043 0308 	orr.w	r3, r3, #8
 8000d4e:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN() ;
 8000d50:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <Clock_init+0x30>)
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	4a03      	ldr	r2, [pc, #12]	; (8000d64 <Clock_init+0x30>)
 8000d56:	f043 0301 	orr.w	r3, r3, #1
 8000d5a:	6193      	str	r3, [r2, #24]


}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr
 8000d64:	40021000 	.word	0x40021000

08000d68 <Menna_SPI1_IRQ_CallBack>:

// related to Interrupt Mechanism
void Menna_SPI1_IRQ_CallBack(struct S_IRQ_SRC irq_src){
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	7138      	strb	r0, [r7, #4]
#ifdef MCU_Act_As_Slave
	if(irq_src.RXEN){
 8000d70:	793b      	ldrb	r3, [r7, #4]
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d00c      	beq.n	8000d96 <Menna_SPI1_IRQ_CallBack+0x2e>
		ch = 0xF ;
 8000d7c:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <Menna_SPI1_IRQ_CallBack+0x38>)
 8000d7e:	220f      	movs	r2, #15
 8000d80:	701a      	strb	r2, [r3, #0]
		MCAL_SPI_Send_Receive_Data(SPI1, &ch, Polling_Disable) ;
 8000d82:	2201      	movs	r2, #1
 8000d84:	4906      	ldr	r1, [pc, #24]	; (8000da0 <Menna_SPI1_IRQ_CallBack+0x38>)
 8000d86:	4807      	ldr	r0, [pc, #28]	; (8000da4 <Menna_SPI1_IRQ_CallBack+0x3c>)
 8000d88:	f7ff fdec 	bl	8000964 <MCAL_SPI_Send_Receive_Data>
		MCAL_UART_Send_Data(USART1, &ch, Enable) ;
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4904      	ldr	r1, [pc, #16]	; (8000da0 <Menna_SPI1_IRQ_CallBack+0x38>)
 8000d90:	4805      	ldr	r0, [pc, #20]	; (8000da8 <Menna_SPI1_IRQ_CallBack+0x40>)
 8000d92:	f7ff ff95 	bl	8000cc0 <MCAL_UART_Send_Data>
	}
#endif


}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000064 	.word	0x20000064
 8000da4:	40013000 	.word	0x40013000
 8000da8:	40013800 	.word	0x40013800

08000dac <Menna_UART1_CallBack>:


// related to Interrupt Mechanism
void Menna_UART1_CallBack(void){
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
	MCAL_SPI_Send_Receive_Data(SPI1, &ch, Polling_Enable) ;
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1) ;
#endif


}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bc80      	pop	{r7}
 8000db6:	4770      	bx	lr

08000db8 <main>:

int main(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08c      	sub	sp, #48	; 0x30
 8000dbc:	af00      	add	r7, sp, #0
	UART_Config uartCFG ;
	SPI_Congig spi1CFG ;
	GPIO_PinConfig_t gpioCFG ;

	Clock_init() ;
 8000dbe:	f7ff ffb9 	bl	8000d34 <Clock_init>
	// PA9 => TX
	// PA10 => RX
	// PA11 => CTS
	// PA12 => RTS

	uartCFG.BaudRate = UART_BaudRate_115200 ;
 8000dc2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000dc6:	623b      	str	r3, [r7, #32]
	uartCFG.HW_Flow_Conterl = UART_HW_Flow_Conterl_NONE ;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// related to Interrupt Mechanism
	uartCFG.IRQ_Enable = UART_IRQ_Enable_RXNEIE ;
 8000dce:	2320      	movs	r3, #32
 8000dd0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	uartCFG.P_IRQ_CallBack = Menna_UART1_CallBack ;
 8000dd4:	4b19      	ldr	r3, [pc, #100]	; (8000e3c <main+0x84>)
 8000dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
	//Related to Polling_Michanism
	//uartCFG.IRQ_Enable = UART_IRQ_Enable_NONE ;
	//uartCFG.P_IRQ_CallBack = NULL ;


	uartCFG.Parity = UART_Parity_NONE ;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uartCFG.Payload_length = UART_Payload_length_8B ;
 8000dde:	2300      	movs	r3, #0
 8000de0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uartCFG.Stop_Bits = UART_Stop_Bits_1 ;
 8000de4:	2300      	movs	r3, #0
 8000de6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uartCFG.UART_Mode = UART_Mode_TX_RX ;
 8000dea:	230c      	movs	r3, #12
 8000dec:	773b      	strb	r3, [r7, #28]

	MCAL_UART_Init(USART1,&uartCFG) ;
 8000dee:	f107 031c 	add.w	r3, r7, #28
 8000df2:	4619      	mov	r1, r3
 8000df4:	4812      	ldr	r0, [pc, #72]	; (8000e40 <main+0x88>)
 8000df6:	f7ff fe3b 	bl	8000a70 <MCAL_UART_Init>

	MCAL_UART_GPIO_Set_Pins(USART1) ;
 8000dfa:	4811      	ldr	r0, [pc, #68]	; (8000e40 <main+0x88>)
 8000dfc:	f7ff fefa 	bl	8000bf4 <MCAL_UART_GPIO_Set_Pins>
	//SPI1_SCK  : PA5
	//SPI1_MISO : PA6
	//SPI1_MOSI : PA7

	// Comma Configuration Master / Slave
	spi1CFG.CLKPhese = SPI_CLKPhese_First_Edge_Clock_Transition ;
 8000e00:	2300      	movs	r3, #0
 8000e02:	81fb      	strh	r3, [r7, #14]
	spi1CFG.CLKPolarity = SPI_CLKPolarity_High_Idle ;
 8000e04:	2302      	movs	r3, #2
 8000e06:	81bb      	strh	r3, [r7, #12]
	spi1CFG.DataSize_Frame_Format = SPI_DataSize_Frame_Format_8Bit ;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	817b      	strh	r3, [r7, #10]
	spi1CFG.Frame_Format = SPI_Frame_Format_MSB_transmitted_first ;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	813b      	strh	r3, [r7, #8]
	// Assume by Default PCK = 8MHZ.
	spi1CFG.SPI_BaudRate_PreScaler = SPI_BaudRate_PreScaler_8 ;
 8000e10:	2310      	movs	r3, #16
 8000e12:	827b      	strh	r3, [r7, #18]
	spi1CFG.Communication_Mode = SPI_Communication_Mode_Directinal_2Lines ;
 8000e14:	2300      	movs	r3, #0
 8000e16:	80fb      	strh	r3, [r7, #6]
	// Focus the Slave select (High) Idle Mode
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1) ;
#endif

#ifdef MCU_Act_As_Slave
	spi1CFG.Device_Mode = SPI_Device_Mode_SLAVE ;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	80bb      	strh	r3, [r7, #4]
	spi1CFG.IRQ_Enable = SPI_IRQ_Enable_RXNEIE ;
 8000e1c:	2340      	movs	r3, #64	; 0x40
 8000e1e:	82bb      	strh	r3, [r7, #20]
	spi1CFG.NSS = SPI_NSS_Hardware_Slave ;
 8000e20:	2300      	movs	r3, #0
 8000e22:	823b      	strh	r3, [r7, #16]
	spi1CFG.P_IRQ_CallBack = Menna_SPI1_IRQ_CallBack ;
 8000e24:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <main+0x8c>)
 8000e26:	61bb      	str	r3, [r7, #24]
#endif

	MCAL_SPI_Init(SPI1, &spi1CFG) ;
 8000e28:	1d3b      	adds	r3, r7, #4
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4806      	ldr	r0, [pc, #24]	; (8000e48 <main+0x90>)
 8000e2e:	f7ff fc17 	bl	8000660 <MCAL_SPI_Init>
	MCAL_SPI_GPIO_Set_Pins(SPI1) ;
 8000e32:	4805      	ldr	r0, [pc, #20]	; (8000e48 <main+0x90>)
 8000e34:	f7ff fca0 	bl	8000778 <MCAL_SPI_GPIO_Set_Pins>

// LOOP FOREEVER
	while(1)
 8000e38:	e7fe      	b.n	8000e38 <main+0x80>
 8000e3a:	bf00      	nop
 8000e3c:	08000dad 	.word	0x08000dad
 8000e40:	40013800 	.word	0x40013800
 8000e44:	08000d69 	.word	0x08000d69
 8000e48:	40013000 	.word	0x40013000

08000e4c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e4c:	480d      	ldr	r0, [pc, #52]	; (8000e84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e4e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000e50:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e54:	480c      	ldr	r0, [pc, #48]	; (8000e88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e56:	490d      	ldr	r1, [pc, #52]	; (8000e8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e58:	4a0d      	ldr	r2, [pc, #52]	; (8000e90 <LoopForever+0xe>)
  movs r3, #0
 8000e5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e5c:	e002      	b.n	8000e64 <LoopCopyDataInit>

08000e5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e62:	3304      	adds	r3, #4

08000e64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e68:	d3f9      	bcc.n	8000e5e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e6a:	4a0a      	ldr	r2, [pc, #40]	; (8000e94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e6c:	4c0a      	ldr	r4, [pc, #40]	; (8000e98 <LoopForever+0x16>)
  movs r3, #0
 8000e6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e70:	e001      	b.n	8000e76 <LoopFillZerobss>

08000e72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e74:	3204      	adds	r2, #4

08000e76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e78:	d3fb      	bcc.n	8000e72 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e7a:	f000 f811 	bl	8000ea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e7e:	f7ff ff9b 	bl	8000db8 <main>

08000e82 <LoopForever>:

LoopForever:
    b LoopForever
 8000e82:	e7fe      	b.n	8000e82 <LoopForever>
  ldr   r0, =_estack
 8000e84:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000e88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e8c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000e90:	08000f20 	.word	0x08000f20
  ldr r2, =_sbss
 8000e94:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000e98:	20000068 	.word	0x20000068

08000e9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e9c:	e7fe      	b.n	8000e9c <ADC1_2_IRQHandler>
	...

08000ea0 <__libc_init_array>:
 8000ea0:	b570      	push	{r4, r5, r6, lr}
 8000ea2:	2500      	movs	r5, #0
 8000ea4:	4e0c      	ldr	r6, [pc, #48]	; (8000ed8 <__libc_init_array+0x38>)
 8000ea6:	4c0d      	ldr	r4, [pc, #52]	; (8000edc <__libc_init_array+0x3c>)
 8000ea8:	1ba4      	subs	r4, r4, r6
 8000eaa:	10a4      	asrs	r4, r4, #2
 8000eac:	42a5      	cmp	r5, r4
 8000eae:	d109      	bne.n	8000ec4 <__libc_init_array+0x24>
 8000eb0:	f000 f81a 	bl	8000ee8 <_init>
 8000eb4:	2500      	movs	r5, #0
 8000eb6:	4e0a      	ldr	r6, [pc, #40]	; (8000ee0 <__libc_init_array+0x40>)
 8000eb8:	4c0a      	ldr	r4, [pc, #40]	; (8000ee4 <__libc_init_array+0x44>)
 8000eba:	1ba4      	subs	r4, r4, r6
 8000ebc:	10a4      	asrs	r4, r4, #2
 8000ebe:	42a5      	cmp	r5, r4
 8000ec0:	d105      	bne.n	8000ece <__libc_init_array+0x2e>
 8000ec2:	bd70      	pop	{r4, r5, r6, pc}
 8000ec4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ec8:	4798      	blx	r3
 8000eca:	3501      	adds	r5, #1
 8000ecc:	e7ee      	b.n	8000eac <__libc_init_array+0xc>
 8000ece:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ed2:	4798      	blx	r3
 8000ed4:	3501      	adds	r5, #1
 8000ed6:	e7f2      	b.n	8000ebe <__libc_init_array+0x1e>
 8000ed8:	08000f18 	.word	0x08000f18
 8000edc:	08000f18 	.word	0x08000f18
 8000ee0:	08000f18 	.word	0x08000f18
 8000ee4:	08000f1c 	.word	0x08000f1c

08000ee8 <_init>:
 8000ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eea:	bf00      	nop
 8000eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eee:	bc08      	pop	{r3}
 8000ef0:	469e      	mov	lr, r3
 8000ef2:	4770      	bx	lr

08000ef4 <_fini>:
 8000ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ef6:	bf00      	nop
 8000ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000efa:	bc08      	pop	{r3}
 8000efc:	469e      	mov	lr, r3
 8000efe:	4770      	bx	lr
